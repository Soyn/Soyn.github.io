{"data":{"site":{"siteMetadata":{"title":"Bee starter","author":"[Your Name]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"67e14683-7363-53fa-af2e-3abefed4860c","excerpt":"…","html":"<p>在前端的学习中，经常会听到双向绑定（<code class=\"language-text\">MVVM</code>）这个概念，双向绑定的概念很简单，就是视图（<code class=\"language-text\">View</code>）上的更新能够实时更新数据层（<code class=\"language-text\">Model</code>），同时数据层的更新也会实时更新到视图层。不同于<code class=\"language-text\">MVC</code>的数据单向流动（从数据层到视图层），那么如何实现数据和视图的双向绑定呢？\n实现数据的双向绑定，首先我们要搞明白面临的问题：</p>\n<ul>\n<li>如何监听试图层的变化？</li>\n<li>视图层变化之后如何更新到数据层？</li>\n<li>如何监听数据层的变化？</li>\n<li>如何将数据层的变化更新到视图层？</li>\n</ul>\n<p>视图层的更新主要是来自用户的输入行为（输入、点击等），我们可以通过监听事件的方式（<code class=\"language-text\">keyup</code>、<code class=\"language-text\">keydown</code>等），在事件回调中获取视图层的更新，将更新同步到数据层上，由于数据层的更新，我们再用数据去刷视图层，这样就是实现了双向绑定，从网上获取的资料来看，主要有以下几种实现方式：</p>\n<h1 id=\"手动绑定\"><a href=\"#%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A\" aria-label=\"手动绑定 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>手动绑定</h1>\n<p>这里手动绑定的意思是，在<code class=\"language-text\">DOM</code>上绑定事件回调，在事件回调函数值中去更新数据层和重新渲染视图，简单的实现如下：\n<img src=\"http://Soyn.github.io/img/handSetHTML.png\" alt=\"HandSetHtml\">\n如上，我们在<code class=\"language-text\">HTML</code>中有一个<code class=\"language-text\">input</code>元素用来输入，另一个<code class=\"language-text\">div</code>元素用来显示输入的元素；在这两个元素上我们声明了特定的属性<code class=\"language-text\">q-value</code>和<code class=\"language-text\">q-text</code>，这两个属性名标示着和数据层的绑定关系，如下，是相关的JS代码：\n<img src=\"http://Soyn.github.io/img/handSetJs.png\" alt=\"handset\">\n这里我们实现双向绑定的思路是，视图层对数据的绑定是通过特定的属性<code class=\"language-text\">q-*</code>，来将<code class=\"language-text\">UI</code>和<code class=\"language-text\">Model</code>绑定起来，使用事件回调监测数据的变化，更新数据，然后刷新<code class=\"language-text\">UI</code>。</p>\n<h1 id=\"脏检测\"><a href=\"#%E8%84%8F%E6%A3%80%E6%B5%8B\" aria-label=\"脏检测 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>脏检测</h1>\n<p><code class=\"language-text\">AngularJS</code>的数据双向绑定是基于脏检查的机制，脏检查的大致实现思想是，在数据层上维护变量的当前值，当视图层上的操作引起数据更新时，会执行脏检测，如果有绑定的变量的值发生了变化，变量对应的指令就会刷新数据绑定的<code class=\"language-text\">UI</code>；同样的脏检查机制的实现，我们在<code class=\"language-text\">DOM</code>上的也有绑定两个东西，一个是数据层上的变量的应用，<code class=\"language-text\">UI</code>更新的时候更新对应的变量，然后另外就是绑定的指令，用来执行具体的<code class=\"language-text\">UI</code>层面的更新逻辑。\n<img src=\"http://Soyn.github.io/img/dirtyCheckHTML.png\" alt=\"dirtyCheckHtml\">\n<img src=\"http://Soyn.github.io/img/dirtyCheckJs.png\" alt=\"dirtyCheckJs\"></p>\n<h1 id=\"数据劫持\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81\" aria-label=\"数据劫持 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据劫持</h1>\n<p>实现双向绑定的另一种方式是，使用数据劫持的方式，给数据层的属性定制<code class=\"language-text\">getter</code>和<code class=\"language-text\">setter</code>，在<code class=\"language-text\">UI</code>上触发了回调函数更新数据的时候，会调到我们定制的<code class=\"language-text\">setter</code>中，在<code class=\"language-text\">setter</code>中会刷新<code class=\"language-text\">UI</code>。\n<img src=\"http://Soyn.github.io/img/hiijackingHTML.png\" alt=\"hijackingHTML\">\n<img src=\"http://Soyn.github.io/img/hijackingJs.png\" alt=\"hijackingJs\">\n在<code class=\"language-text\">DOM</code>属性上我们只需要指明引用的变量，具体的<code class=\"language-text\">UI</code>刷新逻辑定义在<code class=\"language-text\">setter</code>中。</p>\n<p>以上是实现一个双向绑定的常见手段，这里只是了解大致的原理，具体到不同的前端框架中实现的双向绑定，比文章中介绍的更复杂和更健壮，这里只是了解其原理，抓住主要实现原理，框架层面的实现也是基于这些原理来做的。\n文中的<a href=\"https://github.com/Soyn/demos/tree/master/mvvm\">Demo Code</a></p>\n<h1 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h1>\n<ul>\n<li><a href=\"https://jixianqianduan.com/frontend-javascript/2015/11/29/js-data-two-ways-binding.html\">javascript实现数据双向绑定的三种方式</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004681757\">JavaScript数据双向绑定的简单演示 - 前端知识点小结 - SegmentFault 思否</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25464162\">数据双向绑定的分析和简单实现 - 知乎</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"双向绑定","date":"June 15, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-6-15-mvvm/","previous":{"fields":{"slug":"/development/quick_start/"},"frontmatter":{"title":"Quick Start","category":"development"}},"next":null}}