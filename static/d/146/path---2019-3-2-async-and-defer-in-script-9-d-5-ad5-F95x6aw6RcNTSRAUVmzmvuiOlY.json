{"data":{"site":{"siteMetadata":{"title":"Move fast and break things.","author":"wang yao","siteUrl":"http://cuteshilina.com/","comment":{"disqusShortName":"","utterances":"Soyn/Soyn.github.io.git"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"da6132bd-19cc-5089-941f-7ad92691b02e","excerpt":"在访问网页的时候，浏览器是如何渲染当前的页面的？浏览器获取到输入（ HTML 、 CSS 、 Javascript ）的时候，输入中有 DOM Tree 的信息，有样式信息， Javascript 代码，在加载页面的时候，如果 DOM 的加载和解析太耗时的话，首屏的大量留白是很影响用户体验的，这里我们来看看，对于 Scritp 在页面中的加载对 HTML 的加载的性能影响。 Script在页面中的位置 script 标签在页面中放置的位置对于整个页面的加载和功能影响是很大，默认情况下，浏览器在解析 HTMl 页面的时候，遇到 script…","html":"<p>在访问网页的时候，浏览器是如何渲染当前的页面的？浏览器获取到输入（<code>HTML</code>、<code>CSS</code>、<code>Javascript</code>）的时候，输入中有<code>DOM Tree</code>的信息，有样式信息，<code>Javascript</code>代码，在加载页面的时候，如果<code>DOM</code>的加载和解析太耗时的话，首屏的大量留白是很影响用户体验的，这里我们来看看，对于<code>Scritp</code>在页面中的加载对<code>HTML</code>的加载的性能影响。</p>\n<h2>Script在页面中的位置</h2>\n<p><code>script</code>标签在页面中放置的位置对于整个页面的加载和功能影响是很大，默认情况下，浏览器在解析<code>HTMl</code>页面的时候，遇到<code>script</code>标签，如果是<code>inline</code>的话，会立即执行<code>script</code>标签中的代码，这里就牵扯一个问题，浏览器对<code>HTML</code>的解析是按照<code>HTML</code>内容的输入顺序执行的，如果<code>script</code>在<code>head</code>中，如果需要操作<code>DOM</code>，这个时候浏览器对文档的解析并没有结束，可能这时候需要的<code>DOM</code>并不存在。</p>\n<pre><code class=\"language-html\">&#x3C;html>\n  &#x3C;head>\n    &#x3C;link rel=\"stylesheet\" href=\"./style.css\">&#x3C;/link>\n    &#x3C;script type=\"text/javascript\">\n      function foo() {\n        console.log('Dom Length: ', document.getElementsByClassName('test').length);\n      }\n      foo();\n    &#x3C;/script>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div class=\"test\">Test1&#x3C;/div>\n    &#x3C;div class=\"test\">Test2&#x3C;/div>\n    &#x3C;div class=\"test\">Test3&#x3C;/div>\n    &#x3C;div class=\"test\">Test4&#x3C;/div>\n    &#x3C;div class=\"test\">Test5&#x3C;/div>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>如上，是一个<code>inline</code>的<code>script</code>，在<code>script</code>的代码中去取<code>DOM</code>，这个时候浏览器在执行这段代码的时候，浏览器并没有解析到对应的<code>DOM</code>。</p>\n<p><img src=\"./images/inline_in_head.png\"></p>\n<p>所以，为了避免这种情况，一般来说，会将script标签放置在<code>&#x3C;/body></code>标签前，这个时候，所有的<code>DOM</code>都解析好了，不存在找不到<code>DOM</code>的情况。</p>\n<pre><code class=\"language-html\">&#x3C;html>\n  &#x3C;head>\n    &#x3C;link rel=\"stylesheet\" href=\"./style.css\">&#x3C;/link>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div class=\"test\">Test1&#x3C;/div>\n    &#x3C;div class=\"test\">Test2&#x3C;/div>\n    &#x3C;div class=\"test\">Test3&#x3C;/div>\n    &#x3C;div class=\"test\">Test4&#x3C;/div>\n    &#x3C;div class=\"test\">Test5&#x3C;/div>\n    &#x3C;script type=\"text/javascript\">\n      function foo() {\n        console.log('Dom Length: ', document.getElementsByClassName('test').length);\n      }\n      foo();\n    &#x3C;/script>    \n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><img src=\"./images/inline_in_body.png\"></p>\n<h2>外部Script的加载对HTML解析的影响</h2>\n<p>在加载外部的<code>script</code>的时候，<code>script</code>的加载对于页面的性能影响更加明显，加载外部脚本的时候牵扯发外部的请求去请求脚本，这个时候<code>HTML</code>的解析是被阻塞住的，外部<code>script</code>加载成功后，马上执行<code>script</code>脚本，执行完后，才继续解析剩下的<code>HTML</code>。</p>\n<pre><code class=\"language-html\">&#x3C;html>\n  &#x3C;head>\n    &#x3C;link rel=\"stylesheet\" href=\"./style.css\">&#x3C;/link>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div class=\"test\">Test1&#x3C;/div>\n    &#x3C;div class=\"test\">Test2&#x3C;/div>\n    &#x3C;div class=\"test\">Test3&#x3C;/div>\n    &#x3C;div class=\"test\">Test4&#x3C;/div>\n    &#x3C;div class=\"test\">Test5&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"./app.js\">&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><img src=\"./images/extend_script_in_body.png\">\n从上图的<code>profile</code>的图我们可以发现，浏览器在解析<code>HTML</code>的时候，默认在解析到<code>script</code>标签的时候，会加载对应的<code>Javascript</code>代码，加载完成后立即执行，这个过程会将<code>HTML</code>解析阻塞住，那有没有办法解决页面阻塞的问题呢？在<code>HTML5</code>中引入了<code>async</code>和<code>defer</code>这两个属性，可以解决<code>script</code>加载阻塞页面解析的问题。</p>\n<h2>Script中的Async和Defer属性</h2>\n<p>首先我们看看<code>MDN</code>对这两个属性的解释：\n<img src=\"./images/extend_async_mdn.png\">\n如上，是<code>async</code>属性对<code>script</code>标签的加载和执行的影响：</p>\n<ul>\n<li><code>async</code>为<code>true</code>的<code>script</code>是异步加载和执行的，加载过程不会阻塞浏览器对<code>HTML</code>的解析</li>\n<li>有多个<code>async</code>为<code>true</code>的<code>script</code>的执行的顺序是不确定的，执行顺序并不是脚本的引用顺序</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;html>\n  &#x3C;head>\n    &#x3C;link rel=\"stylesheet\" href=\"./style.css\">&#x3C;/link>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div class=\"test\">Test1&#x3C;/div>\n    &#x3C;div class=\"test\">Test2&#x3C;/div>\n    &#x3C;div class=\"test\">Test3&#x3C;/div>\n    &#x3C;div class=\"test\">Test4&#x3C;/div>\n    &#x3C;div class=\"test\">Test5&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" async=true src=\"./app.js\">&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><img src=\"./images/async_chrome_profile.png\">\n从上面的<code>profile</code>的图可以很明显的看到这个过程，<code>Javascript</code>的加载和<code>HTML</code>的解析是并行的，并不会阻塞<code>HTML</code>的<code>parse</code>，但是<code>javascript</code>代码的执行的实际这里是无法确定的。</p>\n<pre><code class=\"language-html\">&#x3C;html>\n  &#x3C;head>\n    &#x3C;link rel=\"stylesheet\" href=\"./style.css\">&#x3C;/link>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div class=\"test\">Test1&#x3C;/div>\n    &#x3C;div class=\"test\">Test2&#x3C;/div>\n    &#x3C;div class=\"test\">Test3&#x3C;/div>\n    &#x3C;div class=\"test\">Test4&#x3C;/div>\n    &#x3C;div class=\"test\">Test5&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" async=true src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js\">&#x3C;/script>\n    &#x3C;script type=\"text/javascript\" async=true src=\"./app.js\">&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>如上，我们在这里从<code>cdn</code>上引入了<code>JQuery</code>的代码，我们来看看这里<code>async=true</code>的时候，对<code>javascript</code>代码的执行情况的影响。\n<img src=\"./images/async_jquery.png\">\n在上面的<code>profile</code>的图中，我们可以很明显的看到，<code>javascript</code>代码的执行顺序，和<code>script</code>的引入顺序并不一致。\n我们接着来看看<code>defer</code>属性对<code>script</code>标签的影响：\n<img src=\"./images/extend_defer_mdn.png\">\n根据<code>MDN</code>的解释，在<code>defer</code>属性为<code>true</code>的情况下，<code>script</code>标签会异步加载，脚本的执行是按照<code>script</code>标签在<code>HTML</code>中出现顺序执行，等所有的<code>script</code>执行完毕之后才会触发<code>DOMContentLoaded</code>事件。\n<img src=\"./images/defer_chrome_profile.png\">\n对于<code>script</code>的加载和执行，结合文中实际的例子，我们总结一下：</p>\n<ul>\n<li><code>script</code>标签默认是同步加载，加载完成之后立即执行</li>\n<li><code>async</code>为<code>true</code>的时候，<code>script</code>的加载是异步的（不会阻塞<code>HTML</code>的解析过程），代码的执行顺序不一定是<code>script</code>标签出现的顺序。</li>\n<li><code>defer</code>的加载和<code>async</code>是异步的不会阻塞<code>HTML</code>的<code>parse</code>，和<code>async</code>区别在于，<code>defer</code>标签的执行是按照在文档中定义的顺序执行的，在代码执行完毕之后才触发<code>DOMContentLoaded</code>，<code>async</code>的代码的执行并不对<code>DOMContentLoaded</code>有影响（代码的执行可能在<code>DOMContentLoaded</code>事件之后，意味着如果在<code>async</code>为<code>true</code>的脚本中拿不到<code>DOMContentLoaded</code>的事件)]</li>\n</ul>\n<h1>Reference</h1>\n<ul>\n<li><a href=\"https://flaviocopes.com/javascript-async-defer/\">Efficiently load JavaScript with defer and async</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\">The Script element</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"script在HTML中的加载","date":"March 02, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-3-2-AsyncAndDeferInScript/","previous":{"fields":{"slug":"/2019-2-23-WriteYourOwnAmdLoader/"},"frontmatter":{"title":"自己动手写AMD Loader","category":"Tech"}},"next":{"fields":{"slug":"/2019-3-16-ESModule/"},"frontmatter":{"title":"ES6 Module","category":"Tech"}}}}