{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"21db0225-26dc-57ea-afbe-fed0d36b960a","excerpt":"Your name Thank you for reading my resume. If you want to contact me, Please send me an email.","html":"<h1 id=\"your-name\"><a href=\"#your-name\" aria-label=\"your name permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your name</h1>\n<div align=\"center\">\n<p><em>Thank you for reading my resume. If you want to contact me, Please send me an email.</em></p>\n</div>","frontmatter":{"title":"about","date":"January 27, 2019","lang":"en"}}},{"node":{"id":"e3176fe5-cf50-5512-9582-12424b1ca324","excerpt":"什么是Promise？ 英文翻译过来是诺言、承诺的意思 顾名思义， 的潜在含义是： 代表的是还没发生的事 在事情没有完成之前，无法确定是成功还是失败 而在 中的 代表的意义是类似的，对于异步操作（网络请求、文件I/O…","html":"<h1 id=\"什么是promise？\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFpromise%EF%BC%9F\" aria-label=\"什么是promise？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是Promise？</h1>\n<p><code class=\"language-text\">Promise</code>英文翻译过来是诺言、承诺的意思</p>\n<p><img src=\"http://Soyn.github.io/img/promise_0.png\"></p>\n<p>顾名思义，<code class=\"language-text\">Promise</code>的潜在含义是：</p>\n<ul>\n<li><code class=\"language-text\">promise</code>代表的是还没发生的事</li>\n<li>在事情没有完成之前，无法确定是成功还是失败</li>\n</ul>\n<p>而在<code class=\"language-text\">Javascript</code>中的<code class=\"language-text\">Promise</code>代表的意义是类似的，对于异步操作（网络请求、文件I/O等）这些事情在完成之前无法确定其状态，在完成的时候要么成功要么失败，<code class=\"language-text\">Promise</code>会在完成的时候通知你。</p>\n<p><img src=\"http://Soyn.github.io/img/promise_1.png\"></p>\n<p>上面是<code class=\"language-text\">Promise</code>的定义，<code class=\"language-text\">Promise</code>是一个表示异步事件处理完成的对象，我们看看传统的异步操作是怎样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Result is ready: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">failureCallback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error on async request: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">requestData</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> sucessCallback<span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在传统的异步操作下，整个接口的定义实现方式，没有一个清晰的定义，不同的人去写，接口的定义方式不一样。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Result is ready: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">failureCallback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error on async request: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">requestData</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>successCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>failureCallback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在<code class=\"language-text\">Promise</code>中，抽象出了异步操作成功（then）的接口和失败的接口（catch/reject），并且支持链式调用，在传统的<code class=\"language-text\">callback</code>的实现中，如果下一个异步操作依赖于上一个操作，很容易写出<code class=\"language-text\">callback hell</code>的这种代码，对于代码的阅读和维护带来麻烦。</p>\n<h1 id=\"promise的状态\"><a href=\"#promise%E7%9A%84%E7%8A%B6%E6%80%81\" aria-label=\"promise的状态 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise的状态</h1>\n<p><code class=\"language-text\">Promise</code>对象对象是一个代理对象，被代理的值表示一个异步操作，在创建的时候，对于最终异步操作的返回结果是未知的，<code class=\"language-text\">Promise</code>允许为异步操作的成功和失败分别绑定相应的处理方法，让异步方法可以像同步方法一样返回值，但并不是立即返回最终的执行结果，而是一个代理了未来出现的结果的<code class=\"language-text\">Promise</code>对象，<code class=\"language-text\">Promise</code>有以下几种状态：</p>\n<ul>\n<li><code class=\"language-text\">pending:</code>初始状态，创建<code class=\"language-text\">promise</code>之后，执行还没结束的时候</li>\n<li><code class=\"language-text\">fulfilled：</code>异步操作成功</li>\n<li><code class=\"language-text\">rejected:</code>异步操作失败</li>\n</ul>\n<p><img src=\"http://Soyn.github.io/img/promise_2.png\"></p>\n<p>如上图，在<code class=\"language-text\">promise</code>创建后，所处的状态为<code class=\"language-text\">pending</code>状态，执行成功或失败的这个过程叫<code class=\"language-text\">settled</code>，<code class=\"language-text\">settled</code>之后，<code class=\"language-text\">promise</code>由<code class=\"language-text\">pending</code>状态转换到<code class=\"language-text\">fulfilled</code>或<code class=\"language-text\">rejected</code>状态，并执行相应的回调。</p>\n<h1 id=\"how-to-use-promise\"><a href=\"#how-to-use-promise\" aria-label=\"how to use promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use Promise?</h1>\n<p>我们首先来看看<code class=\"language-text\">Promise</code>提供的方法：</p>\n<h2 id=\"constructor\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructor</h2>\n<p>常见的方式是通过<code class=\"language-text\">Promise</code>的构造函数得到Promise的实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">asyncWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上<code class=\"language-text\">Promise</code>的构造函数接收一个<code class=\"language-text\">executor</code>函数为参数，这个<code class=\"language-text\">executor</code>一般来说是一个异步操作，在生成实例的时候会被执行，在执行成功的时候调用<code class=\"language-text\">resolve</code>，失败的时候调用<code class=\"language-text\">reject</code>。</p>\n<h2 id=\"实例方法\"><a href=\"#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\" aria-label=\"实例方法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实例方法</h2>\n<ul>\n<li><code class=\"language-text\">Promise.prototype.then(onFulfilled?, onRejected?)</code>，在<code class=\"language-text\">promise resolve</code>的时候<code class=\"language-text\">onFulfilled</code>会被调用，<code class=\"language-text\">reject</code>的时候<code class=\"language-text\">onReject</code>会被调用，这两个参数是可选的，如果你只想对异常进行处理的话，可以使用<code class=\"language-text\">promise.then(undefined, onRejected)</code></li>\n<li><code class=\"language-text\">Promise.prototype.catch(onRejected)</code>，<code class=\"language-text\">catch</code>方法会在<code class=\"language-text\">promise reject</code>的时候被调用。</li>\n<li><code class=\"language-text\">Promise.prototype.finally(onFinally)</code>，向当前<code class=\"language-text\">promise</code>添加一个回调函数，无论当前<code class=\"language-text\">promise</code>的状态是完成还是失败都会被调用</li>\n</ul>\n<h2 id=\"静态方法\"><a href=\"#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\" aria-label=\"静态方法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>静态方法</h2>\n<ul>\n<li><code class=\"language-text\">Promise.resolve(value)</code>，返回一个由给定<code class=\"language-text\">value</code>决定的<code class=\"language-text\">promise</code>对象；如果这个<code class=\"language-text\">value</code>可以是一个<code class=\"language-text\">thenable</code>的对象（带有<code class=\"language-text\">then</code>方法的对象），最终返回的<code class=\"language-text\">promise</code>对象的状态由<code class=\"language-text\">then</code>方法执行决定；否则的话，返回的<code class=\"language-text\">promise</code>对象状态为<code class=\"language-text\">fulfilled</code>，并且将该值传给对应的<code class=\"language-text\">then</code>方法，如果你不知道一个值是否是<code class=\"language-text\">Promise</code>对象，使用<code class=\"language-text\">Promise.resolve(value)</code>来返回一个<code class=\"language-text\">Promise</code>对象，这样就能将该<code class=\"language-text\">value</code>以<code class=\"language-text\">Promise</code>对象的形式使用。</li>\n<li><code class=\"language-text\">Promise.reject(reason)</code>，返回一个执行状态为<code class=\"language-text\">rejected</code>的<code class=\"language-text\">Promise</code>对象，并将错误信息给到对应的处理函数</li>\n<li><code class=\"language-text\">Promise.race(iterable)</code>，当<code class=\"language-text\">iterable</code>中的任意一个子<code class=\"language-text\">promise</code>成功或者失败后，父<code class=\"language-text\">promise</code>会使用这个子<code class=\"language-text\">promise</code>的结果，传给父<code class=\"language-text\">promise</code>绑定的回调上</li>\n<li><code class=\"language-text\">Promise.all(iterable)</code>，这个方法返回一个<code class=\"language-text\">promise</code>对象，只有<code class=\"language-text\">iterable</code>中所有的<code class=\"language-text\">promise</code>执行成功的时候才会触发成功，一旦由任何一个执行失败都会触发要返回这个<code class=\"language-text\">promise</code>额失败，最终<code class=\"language-text\">iterable</code>的返回结果和<code class=\"language-text\">iterable</code>的顺序一致。</li>\n</ul>\n<p><code class=\"language-text\">promise</code>是支持链式调用的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      then<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"promise的错误处理\"><a href=\"#promise%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\" aria-label=\"promise的错误处理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise的错误处理</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\">// use `catch`</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Init'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {A}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// {B}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error was caught!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// use reject</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Init'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error was caught!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">promise</code>在处理错误的时候，可以通过<code class=\"language-text\">Promise.ptototype.catch</code>或者是注册的<code class=\"language-text\">reject</code>方法来处理错误，在<code class=\"language-text\">{A}</code>行处，抛出了错误，这里<code class=\"language-text\">promise</code>的状态会变为<code class=\"language-text\">rejected</code>，会调用对应的回调函数，在<code class=\"language-text\">{A}</code>到<code class=\"language-text\">.catch</code>之间的<code class=\"language-text\">promise</code>链会被打断。</p>\n<h1 id=\"wraaper-by-promise\"><a href=\"#wraaper-by-promise\" aria-label=\"wraaper by promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wraaper by Promise</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们在使用<code class=\"language-text\">setTimeout</code>的时候，<code class=\"language-text\">setTimeout</code>执行的函数如果执行发生了错误，并且在函数的实现中并没有做<code class=\"language-text\">Error Handling</code>，函数执行发生错误的时机我们并不知道，如果使用上面基于<code class=\"language-text\">promise</code>包裹之后的<code class=\"language-text\">timeout</code>，我们是可以明确知道错误发生的时机的。</p>\n<h2 id=\"超时promise\"><a href=\"#%E8%B6%85%E6%97%B6promise\" aria-label=\"超时promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>超时Promise</h2>\n<p><code class=\"language-text\">promise</code>创建之后，会等待异步操作的执行，如果异步操作的时间很长的话，这个<code class=\"language-text\">promise</code>一直处于  <code class=\"language-text\">pending</code>状态，对于用户来说，页面会一直停留在<code class=\"language-text\">loading</code>的状态，显然，用户体验并不好，因此，对于这种情况，我们需要提供可以在超时之后，取消<code class=\"language-text\">promsie</code>的机制：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">delayPromise</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Operation is timeout!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> timeoutPromise <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>asyncFn<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>asyncFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">delayPromise</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上我们基于<code class=\"language-text\">Promise.race</code>实现了超时<code class=\"language-text\">promise</code>。</p>\n<h2 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h2>\n<ul>\n<li><a href=\"http://liubin.org/promises-book/\">Promise迷你书</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"Promise初探","date":"April 20, 2019","lang":null}}},{"node":{"id":"e5484c2a-6e8f-5d83-bb5b-05b062a45f7e","excerpt":"什么是同源策略 \n上面是 对同源策略的定义，简单来说同源策略就是限制不同的源（ ）之间的交互的安全策略。想象如果没有同源策略的限制，你访问银行的网站A时的登录信息，在你访问另一个网站B的时候，B网站可以拿到A网站的信息，如果B…","html":"<h1 id=\"什么是同源策略\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\" aria-label=\"什么是同源策略 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是同源策略</h1>\n<p><img src=\"http://Soyn.github.io/img/wiki.png\">\n上面是<code class=\"language-text\">Wikipedia</code>对同源策略的定义，简单来说同源策略就是限制不同的源（<code class=\"language-text\">Domain</code>）之间的交互的安全策略。想象如果没有同源策略的限制，你访问银行的网站A时的登录信息，在你访问另一个网站B的时候，B网站可以拿到A网站的信息，如果B网站有恶意的代码，就可以直接访问你的银行账户。\n同源策略中的同源，是三个相同：</p>\n<ul>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口号相同</li>\n</ul>\n<p>以<code class=\"language-text\">http://www.example.com</code>为例：</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Outcome</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.example1.com\">http://www.example1.com</a></td>\n<td>Failure</td>\n<td>域名不同</td>\n</tr>\n<tr>\n<td><a href=\"http://www.example.com:8080\">http://www.example.com:8080</a></td>\n<td>Failure</td>\n<td>端口号不同</td>\n</tr>\n<tr>\n<td><a href=\"http://www.example.com/dir/page.html\">http://www.example.com/dir/page.html</a></td>\n<td>Same Origin</td>\n<td>仅仅是path不同</td>\n</tr>\n<tr>\n<td><a href=\"https://www.example1.com\">https://www.example1.com</a></td>\n<td>Failure</td>\n<td>协议不同</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"同源策略限制的范围\"><a href=\"#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%99%90%E5%88%B6%E7%9A%84%E8%8C%83%E5%9B%B4\" aria-label=\"同源策略限制的范围 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同源策略限制的范围</h1>\n<p>同源策略对跨源访问的控制可以分为三类；</p>\n<ul>\n<li>对跨域资源的<code class=\"language-text\">写操作</code>是可以，例如表单提交、重定向这些不受同源策略的限制</li>\n<li>一些替换元素（img、audio、video等）不受同源策略的限制</li>\n<li>不同源之间的资源读操作（获取cookie、localStorage、DOM、AJAX请求等）受到同源策略的限制</li>\n</ul>\n<p>对于开发人员来说，第三条限制，跨域资源之间的读取受到限制，这个是最常遇见的问题，对于第二条中一些HTML原生标签不受跨域访问的限制，可以用来<code class=\"language-text\">hack</code>掉同源策略的限制，以下资源是不受同源策略限制的：</p>\n<ul>\n<li><code class=\"language-text\">&lt;script&gt;标签</code></li>\n<li><code class=\"language-text\">外部CSS的加载&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code></li>\n<li><code class=\"language-text\">&lt;Img&gt;标签</code></li>\n<li><code class=\"language-text\">&lt;video&gt;和&lt;audio&gt;标签</code></li>\n<li><code class=\"language-text\">&lt;object&gt;、&lt;embed&gt;（&lt;applet&gt;也不受同源策略限制，但该标签已经被废弃）</code></li>\n<li><code class=\"language-text\">@font-face引用的字体（浏览器实现有差异，有些要同源）</code></li>\n<li><code class=\"language-text\">&lt;iframe&gt;中嵌入的内容</code></li>\n</ul>\n<h1 id=\"如何突破同源策略的限制\"><a href=\"#%E5%A6%82%E4%BD%95%E7%AA%81%E7%A0%B4%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E9%99%90%E5%88%B6\" aria-label=\"如何突破同源策略的限制 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何突破同源策略的限制</h1>\n<h2 id=\"change-origin\"><a href=\"#change-origin\" aria-label=\"change origin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Change Origin</h2>\n<p>在网页上可以通过设置<code class=\"language-text\">document.domain</code>设置当前页面所在的域，例如，在页面<code class=\"language-text\">http://store.company.com/dir/page.html</code>中的<code class=\"language-text\">JS</code>脚本执行了下面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> <span class=\"token string\">\"company.com\"</span>；</code></pre></div>\n<p>那么在当前网站上去获取<code class=\"language-text\">http://www.company.com</code>的网站上的资源是不受同源策略的限制的，但是这个改变<code class=\"language-text\">domain</code>的方法仅仅用于二级域名获取一级域名的资源的时候，你不能在<code class=\"language-text\">http://www.company.com</code>的<code class=\"language-text\">domain</code>改变为<code class=\"language-text\">otherCompany.com</code>。</p>\n<h1 id=\"iframe\"><a href=\"#iframe\" aria-label=\"iframe permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iframe</h1>\n<p><code class=\"language-text\">iframe</code>在的父子窗口如果不是同源的话，在访问获取彼此的DOM节点或者读取数据的话，会受到同源策略的限制，无法访问。\n<img src=\"http://Soyn.github.io/img/iframe.png\">\n父窗口所在的域为<code class=\"language-text\">http://localhost:5500</code>，其中子窗口所在的域为<code class=\"language-text\">http://localhost:8080</code>，这里父子窗口是同源的，所以彼此在获取资源的时候，会受到同源策略的限制：\n<img src=\"http://Soyn.github.io/img/parent.png\">\n<img src=\"http://Soyn.github.io/img/child.png\">\n对于<code class=\"language-text\">iframe</code>额跨域问题，有三种解决办法：</p>\n<ul>\n<li>使用<code class=\"language-text\">fragement</code>（hash tag）</li>\n<li>windows.name</li>\n<li>\n<p>postMessage</p>\n<h2 id=\"fragement\"><a href=\"#fragement\" aria-label=\"fragement permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragement</h2>\n<p>这里的<code class=\"language-text\">fragement</code>指的是<code class=\"language-text\">url</code>中<code class=\"language-text\">#</code>后面的部分，在父窗口中把信息作为<code class=\"language-text\">hash</code>写入到子窗口的src上。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalSrc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFrame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> originalSrc <span class=\"token operator\">+</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFrame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因为<code class=\"language-text\">url hash</code>的改变不会引起页面的刷新，但是会触发<code class=\"language-text\">onhashchange</code>的事件，在子窗口中监听<code class=\"language-text\">onhashchange</code>的事件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>onhashchange <span class=\"token operator\">=</span> getData</code></pre></div>\n<p>同样，子窗口也可以通过同样的方式，向父窗口传递数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">parent<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>parentUrl <span class=\"token operator\">+</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"code-classlanguage-textwindownamecode\"><a href=\"#code-classlanguage-textwindownamecode\" aria-label=\"code classlanguage textwindownamecode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">window.name</code></h2>\n<p><code class=\"language-text\">window.name</code>在页面进行跳转前设置的值，在跳转后也可以访问到，我们可以借助<code class=\"language-text\">window.name</code>的这个特性来解决跨域问题，整个流程如下：</p>\n</li>\n<li>在父窗口设置子<code class=\"language-text\">iframe</code>的<code class=\"language-text\">src</code>，在子窗口<code class=\"language-text\">load</code>成功后将<code class=\"language-text\">data</code>挂到<code class=\"language-text\">window.name</code>上，然后设置子窗口的<code class=\"language-text\">location.href</code>到与父窗口同域的页面</li>\n<li>\n<p>跳转到同域的页面后，父窗口就可以通过<code class=\"language-text\">window.name</code>拿到跨域页面设置的数据了\n例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html  <span class=\"token comment\">// {A}</span>\nb<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html  <span class=\"token comment\">// {B}</span>\na<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>empty<span class=\"token punctuation\">.</span>html  <span class=\"token comment\">// {C}</span></code></pre></div>\n<p>我们在<code class=\"language-text\">A</code>中加载完成后，在<code class=\"language-text\">A</code>页面中设置<code class=\"language-text\">src</code>为<code class=\"language-text\">B</code>页面的<code class=\"language-text\">url</code>，在<code class=\"language-text\">iframe</code>加载成功后，将数据设置到<code class=\"language-text\">window.name</code>上，然后改变自己的<code class=\"language-text\">location.href</code>为<code class=\"language-text\">C</code>页面，<code class=\"language-text\">C</code>页面加载成功后，<code class=\"language-text\">A</code>页面和<code class=\"language-text\">B</code>页面就是同源的了，这个时候<code class=\"language-text\">A</code>页面去子窗口上取<code class=\"language-text\">window.name</code>的值就不会因为跨域问题而报错了。 <strong>使用window.name的关键是在设置完window.name后，要将页面跳转到与父窗口同源的页面，这样主窗口才能访问子窗口上设置的数据</strong></p>\n<h2 id=\"windowpostmessag\"><a href=\"#windowpostmessag\" aria-label=\"windowpostmessag permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>window.postMessag</h2>\n<p><code class=\"language-text\">html5</code>提供了<code class=\"language-text\">postMessage</code>的机制，用于不同源之间的通信：</p>\n</li>\n</ul>\n<p><img src=\"http://Soyn.github.io/img/postMessage.png\" alt=\"postMessage MDN\"></p>\n<p><img src=\"http://Soyn.github.io/img/pm0.png\">\n在父窗口中监听<code class=\"language-text\">message</code>事件\n<img src=\"http://Soyn.github.io/img/pm1.png\">\n<code class=\"language-text\">iframe</code>窗口和父窗口不是同源的，通过<code class=\"language-text\">postMessage</code>将消息发送给父窗口。</p>\n<h2 id=\"jsonp\"><a href=\"#jsonp\" aria-label=\"jsonp permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSONP</h2>\n<p>在浏览器中，<code class=\"language-text\">script</code>标签是可以从不同源的地址上加载而不受同源策略的限制，这就给我们提供了一种手段，绕过同源策略的限制，<code class=\"language-text\">JSONP</code>就是通过这种手段来达到跨域通信的，但是<code class=\"language-text\">JSONP</code>需要服务端的支持，将返回的<code class=\"language-text\">JSON</code>数据和<code class=\"language-text\">url</code>中的<code class=\"language-text\">callback</code>拼接起来，只要前端定义了这个函数，在浏览器看来，就是从服务端加载了一段带数据的函数调用。\n<img src=\"http://Soyn.github.io/img/JSONP0.png\">\n<img src=\"http://Soyn.github.io/img/JSONP1.png\"></p>\n<h2 id=\"cors\"><a href=\"#cors\" aria-label=\"cors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS</h2>\n<p><code class=\"language-text\">CORS(cross-origin resource share)</code>规范了跨域请求的标准，通过<code class=\"language-text\">HTTP</code>头让浏览器允许跨域请求的发送，这个话题，我会在下一篇博客细讲。</p>\n<h2 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h2>\n<ul>\n<li><a href=\"https://medium.com/@baphemot/understanding-cors-18ad6b478e2b\">Understanding CORS – Bartosz Szczeciński – Medium</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">浏览器同源政策及其规避方法</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">CORS</a></li>\n<li><a href=\"https://github.com/MuYunyun/blog/issues/13\">跨域实践二三事</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS MDN</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"浏览器同源策略","date":"May 11, 2019","lang":null}}},{"node":{"id":"67e14683-7363-53fa-af2e-3abefed4860c","excerpt":"…","html":"<p>在前端的学习中，经常会听到双向绑定（<code class=\"language-text\">MVVM</code>）这个概念，双向绑定的概念很简单，就是视图（<code class=\"language-text\">View</code>）上的更新能够实时更新数据层（<code class=\"language-text\">Model</code>），同时数据层的更新也会实时更新到视图层。不同于<code class=\"language-text\">MVC</code>的数据单向流动（从数据层到视图层），那么如何实现数据和视图的双向绑定呢？\n实现数据的双向绑定，首先我们要搞明白面临的问题：</p>\n<ul>\n<li>如何监听试图层的变化？</li>\n<li>视图层变化之后如何更新到数据层？</li>\n<li>如何监听数据层的变化？</li>\n<li>如何将数据层的变化更新到视图层？</li>\n</ul>\n<p>视图层的更新主要是来自用户的输入行为（输入、点击等），我们可以通过监听事件的方式（<code class=\"language-text\">keyup</code>、<code class=\"language-text\">keydown</code>等），在事件回调中获取视图层的更新，将更新同步到数据层上，由于数据层的更新，我们再用数据去刷视图层，这样就是实现了双向绑定，从网上获取的资料来看，主要有以下几种实现方式：</p>\n<h1 id=\"手动绑定\"><a href=\"#%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A\" aria-label=\"手动绑定 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>手动绑定</h1>\n<p>这里手动绑定的意思是，在<code class=\"language-text\">DOM</code>上绑定事件回调，在事件回调函数值中去更新数据层和重新渲染视图，简单的实现如下：\n<img src=\"http://Soyn.github.io/img/handSetHTML.png\" alt=\"HandSetHtml\">\n如上，我们在<code class=\"language-text\">HTML</code>中有一个<code class=\"language-text\">input</code>元素用来输入，另一个<code class=\"language-text\">div</code>元素用来显示输入的元素；在这两个元素上我们声明了特定的属性<code class=\"language-text\">q-value</code>和<code class=\"language-text\">q-text</code>，这两个属性名标示着和数据层的绑定关系，如下，是相关的JS代码：\n<img src=\"http://Soyn.github.io/img/handSetJs.png\" alt=\"handset\">\n这里我们实现双向绑定的思路是，视图层对数据的绑定是通过特定的属性<code class=\"language-text\">q-*</code>，来将<code class=\"language-text\">UI</code>和<code class=\"language-text\">Model</code>绑定起来，使用事件回调监测数据的变化，更新数据，然后刷新<code class=\"language-text\">UI</code>。</p>\n<h1 id=\"脏检测\"><a href=\"#%E8%84%8F%E6%A3%80%E6%B5%8B\" aria-label=\"脏检测 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>脏检测</h1>\n<p><code class=\"language-text\">AngularJS</code>的数据双向绑定是基于脏检查的机制，脏检查的大致实现思想是，在数据层上维护变量的当前值，当视图层上的操作引起数据更新时，会执行脏检测，如果有绑定的变量的值发生了变化，变量对应的指令就会刷新数据绑定的<code class=\"language-text\">UI</code>；同样的脏检查机制的实现，我们在<code class=\"language-text\">DOM</code>上的也有绑定两个东西，一个是数据层上的变量的应用，<code class=\"language-text\">UI</code>更新的时候更新对应的变量，然后另外就是绑定的指令，用来执行具体的<code class=\"language-text\">UI</code>层面的更新逻辑。\n<img src=\"http://Soyn.github.io/img/dirtyCheckHTML.png\" alt=\"dirtyCheckHtml\">\n<img src=\"http://Soyn.github.io/img/dirtyCheckJs.png\" alt=\"dirtyCheckJs\"></p>\n<h1 id=\"数据劫持\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81\" aria-label=\"数据劫持 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据劫持</h1>\n<p>实现双向绑定的另一种方式是，使用数据劫持的方式，给数据层的属性定制<code class=\"language-text\">getter</code>和<code class=\"language-text\">setter</code>，在<code class=\"language-text\">UI</code>上触发了回调函数更新数据的时候，会调到我们定制的<code class=\"language-text\">setter</code>中，在<code class=\"language-text\">setter</code>中会刷新<code class=\"language-text\">UI</code>。\n<img src=\"http://Soyn.github.io/img/hiijackingHTML.png\" alt=\"hijackingHTML\">\n<img src=\"http://Soyn.github.io/img/hijackingJs.png\" alt=\"hijackingJs\">\n在<code class=\"language-text\">DOM</code>属性上我们只需要指明引用的变量，具体的<code class=\"language-text\">UI</code>刷新逻辑定义在<code class=\"language-text\">setter</code>中。</p>\n<p>以上是实现一个双向绑定的常见手段，这里只是了解大致的原理，具体到不同的前端框架中实现的双向绑定，比文章中介绍的更复杂和更健壮，这里只是了解其原理，抓住主要实现原理，框架层面的实现也是基于这些原理来做的。\n文中的<a href=\"https://github.com/Soyn/demos/tree/master/mvvm\">Demo Code</a></p>\n<h1 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h1>\n<ul>\n<li><a href=\"https://jixianqianduan.com/frontend-javascript/2015/11/29/js-data-two-ways-binding.html\">javascript实现数据双向绑定的三种方式</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004681757\">JavaScript数据双向绑定的简单演示 - 前端知识点小结 - SegmentFault 思否</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25464162\">数据双向绑定的分析和简单实现 - 知乎</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"双向绑定","date":"June 15, 2019","lang":null}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}