{"data":{"site":{"siteMetadata":{"title":"Move fast and break things.","author":"wang yao","siteUrl":"https://soyn.github.io.com","comment":{"disqusShortName":"","utterances":"Soyn/Soyn.github.io.git"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"ec8d0421-e766-5dad-8c3e-be7709a35edb","excerpt":"TL;DR; 在 、 的应用中，使用 来做性能优化是常见的优化手段 默认只有一份 ， 命中的策略是浅比较，引用改变了会导致 失效 支持定制 函数和 命中策略 在开发 前端应用的时候，我们经常会使用 做状态管理，但是随着前端代码的复杂度的上升，会引入 作为性能优化的手段之一，这篇文章就Reselect的一些应用场景作一些介绍。 什么是Selector 在介绍 的之前，我们首先要知道 这个概念，那么什么是 呢？\n 这个概念并不是 t…","html":"<p>TL;DR;</p>\n<ul>\n<li>在<code class=\"language-text\">React</code>、<code class=\"language-text\">Redux</code>的应用中，使用<code class=\"language-text\">Reselect</code>来做性能优化是常见的优化手段</li>\n<li><code class=\"language-text\">Reselect</code>默认只有一份<code class=\"language-text\">cache</code>，<code class=\"language-text\">cache</code>命中的策略是浅比较，引用改变了会导致<code class=\"language-text\">cache</code>失效</li>\n<li>\n<h2 id=\"code-classlanguage-textreselectcode支持定制code-classlanguage-textmemeoizecode函数和code-classlanguage-textcachecode命中策略\"><a href=\"#code-classlanguage-textreselectcode%E6%94%AF%E6%8C%81%E5%AE%9A%E5%88%B6code-classlanguage-textmemeoizecode%E5%87%BD%E6%95%B0%E5%92%8Ccode-classlanguage-textcachecode%E5%91%BD%E4%B8%AD%E7%AD%96%E7%95%A5\" aria-label=\"code classlanguage textreselectcode支持定制code classlanguage textmemeoizecode函数和code classlanguage textcachecode命中策略 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Reselect</code>支持定制<code class=\"language-text\">memeoize</code>函数和<code class=\"language-text\">cache</code>命中策略</h2>\n<p>在开发<code class=\"language-text\">React</code>前端应用的时候，我们经常会使用<code class=\"language-text\">Redux</code>做状态管理，但是随着前端代码的复杂度的上升，会引入<code class=\"language-text\">Reselect</code>作为性能优化的手段之一，这篇文章就Reselect的一些应用场景作一些介绍。</p>\n<h2 id=\"什么是selector\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFselector\" aria-label=\"什么是selector permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是Selector</h2>\n<p>在介绍<code class=\"language-text\">Reselect</code>的之前，我们首先要知道<code class=\"language-text\">Selector</code>这个概念，那么什么是<code class=\"language-text\">Selector</code>呢？\n<code class=\"language-text\">Selector</code>这个概念并不是<code class=\"language-text\">Javascrip</code>t或者<code class=\"language-text\">React</code>、<code class=\"language-text\">Redux</code>的一个概念。想象一下你去便利店买可乐，你给店员说要可口可可，这时候店员就去给你拿一罐可口可乐，这时候，店员其实就是充当了<code class=\"language-text\">Selector</code>的角色，店员知道如何从各种商品里拿到你要的可口可乐，具体来说<code class=\"language-text\">Selctor</code>有以下特点：</p>\n</li>\n<li><code class=\"language-text\">Selector</code>知道从哪里，以及如何去获取数据的子集</li>\n<li>\n<p><code class=\"language-text\">Selector</code>会返回数据的子集\n用代码来表示就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCoke</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>shop<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>coke</code></pre></div>\n<h2 id=\"为什么我们需要selector？\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81selector%EF%BC%9F\" aria-label=\"为什么我们需要selector？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么我们需要Selector？</h2>\n<p>简单来说<code class=\"language-text\">Selector</code>就是从一个大的<code class=\"language-text\">State</code>上去获取子数据的函数，其实就是从一个大的<code class=\"language-text\">Object</code>，根据指定的<code class=\"language-text\">path</code>去取数据，如果自己不写<code class=\"language-text\">Selector</code>，也可以在用的地方从<code class=\"language-text\">state</code>上去取，但是这样存在的一个问题是，如果有多个地方都需要同一份数据，你不得不在多个地方加同样的代码，如果<code class=\"language-text\">State</code>的结构变了，那么这样就会取修改多个文件的代码，可维护性并不高，所以从可维护性的角度来说，<code class=\"language-text\">Selector</code>是很有必要的。\n同样随着项目复杂度的提升，我们会有很多个<code class=\"language-text\">Selector</code>，针对于获取数据粒度，不同的<code class=\"language-text\">Selector</code>是可以组合成更复杂的`Selector<code class=\"language-text\"></code>。</p>\n<h2 id=\"为什么要在项目中引入reselector\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%95%E5%85%A5reselector\" aria-label=\"为什么要在项目中引入reselector permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么要在项目中引入Reselector</h2>\n<p>简单来说就是为了性能，因为<code class=\"language-text\">Reselector</code>给<code class=\"language-text\">Selector</code>提供了缓存的能力，避免了重复计算；在一个复杂的<code class=\"language-text\">Redux</code>的Web App中，在<code class=\"language-text\">state</code>发生变化的时候，会依次调用所有的<code class=\"language-text\">connect</code>，从理论上来说我们只应该去刷新和变化数据相关的组件，但是可能会存在这种情况，某些<code class=\"language-text\">connect</code>中要获取的数据虽然没变，但是如果每次connect每次都返回一个新的引用，那么就会导致无谓的重刷；还存在的问题是，在<code class=\"language-text\">connect</code>中回去数据的逻辑是很耗时的操作，导致性能瓶颈。这两个问题字实际的开发中，是很常见的问题，<code class=\"language-text\">Reselect</code>可以在一定程度上解决这些意外的问题。</p>\n</li>\n</ul>\n<h2 id=\"如何使用reselector\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8reselector\" aria-label=\"如何使用reselector permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用Reselector</h2>\n<p>我们通过一个例子来看看，来看看<code class=\"language-text\">Reselect</code>是如何提升性能的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREASE_1'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        demo_1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>demo_1<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREASE_2'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        demo_2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>demo_2<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        demo_1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        demo_2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase_1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREASE_1'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase_2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREASE_2'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> demo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>demo_1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    demoData<span class=\"token punctuation\">:</span> demo1<span class=\"token punctuation\">,</span><span class=\"token comment\">//demoDataSelector(state, 'demo_1'),</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> demo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>demo_2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    demoData<span class=\"token punctuation\">:</span> demo2<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CardView1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...render cardview1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"card\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n      width<span class=\"token punctuation\">:</span> <span class=\"token string\">'150px'</span><span class=\"token punctuation\">,</span>\n      height<span class=\"token punctuation\">:</span> <span class=\"token string\">'50px'</span><span class=\"token punctuation\">,</span>\n      display<span class=\"token punctuation\">:</span> <span class=\"token string\">'inline-block'</span><span class=\"token punctuation\">,</span>\n      color<span class=\"token punctuation\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`Cardview1 CurrentView: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>demoData<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CardView2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...render cardview2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"card\"</span>style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n      width<span class=\"token punctuation\">:</span> <span class=\"token string\">'150px'</span><span class=\"token punctuation\">,</span>\n      height<span class=\"token punctuation\">:</span> <span class=\"token string\">'50px'</span><span class=\"token punctuation\">,</span>\n      display<span class=\"token punctuation\">:</span> <span class=\"token string\">'inline-block'</span><span class=\"token punctuation\">,</span>\n      marginLeft<span class=\"token punctuation\">:</span> <span class=\"token string\">'10px'</span><span class=\"token punctuation\">,</span>\n      color<span class=\"token punctuation\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`Cardview2 CurrentView: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>demoData<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> connected <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  CardView1<span class=\"token punctuation\">:</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CardView1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  CardView2<span class=\"token punctuation\">:</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CardView2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app-container\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        textAlign<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"count1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">increase_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Increase Card <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"count2\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">increase_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Increase Card <span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>connected<span class=\"token punctuation\">.</span>CardView1<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>connected<span class=\"token punctuation\">.</span>CardView2<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在上面的代码中，<code class=\"language-text\">Cardview1</code>和<code class=\"language-text\">CardView2</code>每次会从<code class=\"language-text\">state</code>上取出数据，然后放到一个新的<code class=\"language-text\">Object</code>上去，导致每次都会产生一个新的引用，那么这里会导致的问题是，在我们更新<code class=\"language-text\">demo_1</code>的数据的时候理当只刷新<code class=\"language-text\">Cardview1</code>，但是在上面代码的情况下，刷新<code class=\"language-text\">Cardview1</code>的时候也会刷新<code class=\"language-text\">Cardview2</code>，反之亦然；当我点击\n这里存在的问题是，在<code class=\"language-text\">mapStateToProps</code>中，每次都返回了一个新的引用，所以导致虽然和组件中无关的属性更新了，但是仍然刷新了；这里我们使用<code class=\"language-text\">Reselect</code>将<code class=\"language-text\">mapStateToProps</code>中的<code class=\"language-text\">Selector</code>包一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDemoData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> demoDataSelector <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>getDemoData<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    demoData<span class=\"token punctuation\">:</span> <span class=\"token function\">demoDataSelector</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">'demo_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    demoData<span class=\"token punctuation\">:</span> <span class=\"token function\">demoDataSelector</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">'demo_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的话使用<code class=\"language-text\">Reselect</code>来解决这个问题，这里虽然这个例子不大合适，但是这里仅仅是以这个为例子来讲解<code class=\"language-text\">Reselect</code>的用法。</p>\n<h2 id=\"如何在复用的组件中使用reselect？\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E5%A4%8D%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8reselect%EF%BC%9F\" aria-label=\"如何在复用的组件中使用reselect？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何在复用的组件中使用Reselect？</h2>\n<p>如果一个使用了<code class=\"language-text\">Reselect</code>的组件在多个地方使用，那么其实这个组件的优化是无意义的，因为在生成下一个组件的实例的时候会将上一个组件的<code class=\"language-text\">cache</code>冲掉，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ShopItems <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/shopitems'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Shop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>ShopItems category<span class=\"token operator\">=</span><span class=\"token string\">\"belts\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>ShopItems category<span class=\"token operator\">=</span><span class=\"token string\">\"dresses\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>ShopItems category<span class=\"token operator\">=</span><span class=\"token string\">\"pants\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getItemsByCategory</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getItemsSelector <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>getItemsByCategory<span class=\"token punctuation\">,</span> items <span class=\"token operator\">=></span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ShopItems</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>getItemsSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ShopItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，这里复用了<code class=\"language-text\">ShopItems</code>这个组件，这个组件使用的<code class=\"language-text\">Selector</code>使用了<code class=\"language-text\">Reselect</code>，但是这里的优化是没什么卵用的，因为对于<code class=\"language-text\">Selector</code>来说每次的参数都变化了，<code class=\"language-text\">cache</code>并不会命中，所有我们需要在<strong>每一次实例化组件的时候，为每一个组件生成一份<code class=\"language-text\">cache</code></strong>，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeGetItemsSelector</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>getItemsByCategory<span class=\"token punctuation\">,</span> items <span class=\"token operator\">=></span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeMapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> getItems <span class=\"token operator\">=</span> <span class=\"token function\">makeGetItemsSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\titems<span class=\"token punctuation\">:</span> <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>makeMapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ShopItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，这里会为每一个组件生成一个私有的<code class=\"language-text\">Selector</code>，就可以避免在复用组件的时候，<code class=\"language-text\">cache</code>没有做对的问题。</p>\n<h2 id=\"使用reselect生成结构化的数据\"><a href=\"#%E4%BD%BF%E7%94%A8reselect%E7%94%9F%E6%88%90%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E6%95%B0%E6%8D%AE\" aria-label=\"使用reselect生成结构化的数据 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用Reselect生成结构化的数据</h2>\n<p>考虑下面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mySelectorA</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>a\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mySelectorB</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>b\n\n<span class=\"token comment\">// The result function in the following selector</span>\n<span class=\"token comment\">// is simply building an object from the input selectors</span>\n<span class=\"token keyword\">const</span> structuredSelector <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n   mySelectorA<span class=\"token punctuation\">,</span>\n   mySelectorB<span class=\"token punctuation\">,</span>\n   mySelectorC<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     a<span class=\"token punctuation\">,</span>\n     b<span class=\"token punctuation\">,</span>\n     c\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里最后需要生成一个结构化的数据，这种情况下，<code class=\"language-text\">Reselect</code>提供了生成结构化的数据的<code class=\"language-text\">API</code>—> <code class=\"language-text\">createStructuredSelector</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mySelectorA</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>a\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mySelectorB</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>b\n\n<span class=\"token keyword\">const</span> structuredSelector <span class=\"token operator\">=</span> <span class=\"token function\">createStructuredSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  x<span class=\"token punctuation\">:</span> mySelectorA<span class=\"token punctuation\">,</span>\n  y<span class=\"token punctuation\">:</span> mySelectorB\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">structuredSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// will produce { x: 1, y: 2 }</span></code></pre></div>\n<h2 id=\"定制createselector\"><a href=\"#%E5%AE%9A%E5%88%B6createselector\" aria-label=\"定制createselector permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定制createSelector</h2>\n<p>因为默认的<code class=\"language-text\">createSelector</code>的只提供了一份<code class=\"language-text\">cache</code>，在很多情况下并不满足我们的需求，另外<code class=\"language-text\">cache</code>的命中策略是浅比较，在一些情况下并不适用我们的使用场景，所以<code class=\"language-text\">Reselect</code>提供了定制<code class=\"language-text\">createSelector</code>的能力 —><code class=\"language-text\">createSelectorCreator(memoize, ...memoizeOptions)</code>。如下，我们使用<code class=\"language-text\">lodash</code>生成一个一个无限<code class=\"language-text\">cache</code>的<code class=\"language-text\">createSelector</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mySelectorCreator <span class=\"token operator\">=</span> <span class=\"token function\">createSelectorCreator</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>memoize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，我们就拥有了一个无限<code class=\"language-text\">cache</code>的<code class=\"language-text\">selectorCreator</code>。</p>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"如何使用Reselect做性能优化","date":"December 29, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-12-29-Reselect/","previous":{"fields":{"slug":"/2018-12-22-TreeShaking/"},"frontmatter":{"title":"Tree Shaking","category":"Tech"}},"next":{"fields":{"slug":"/2019-1-12-HowToBuildYourOwnTimeSystem/"},"frontmatter":{"title":"我是怎样构建自己的时间管理系统的","category":"Life"}}}}