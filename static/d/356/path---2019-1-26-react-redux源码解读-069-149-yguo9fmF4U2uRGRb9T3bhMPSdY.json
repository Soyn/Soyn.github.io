{"data":{"site":{"siteMetadata":{"title":"Move fast and break things.","author":"wang yao","siteUrl":"http://cuteshilina.com/","comment":{"disqusShortName":"","utterances":"Soyn/Soyn.github.io.git"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"936bbb6a-8522-56f3-92be-62626f1a7dc8","excerpt":"TL;DR; 本质上是一个高阶组件 会对组件做缓存控制 使用 做全局状态的通信 Overview 如上，react-redux向外暴露了四个API，分别是 、 、 、 。 Provider…","html":"<hr>\n<p>TL;DR;</p>\n<ul>\n<li><code class=\"language-text\">Connect</code>本质上是一个高阶组件</li>\n<li><code class=\"language-text\">Connect</code>会对组件做缓存控制</li>\n<li>\n<h2 id=\"code-classlanguage-textconnectcode使用code-classlanguage-textcontextcode做全局状态的通信\"><a href=\"#code-classlanguage-textconnectcode%E4%BD%BF%E7%94%A8code-classlanguage-textcontextcode%E5%81%9A%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%9A%84%E9%80%9A%E4%BF%A1\" aria-label=\"code classlanguage textconnectcode使用code classlanguage textcontextcode做全局状态的通信 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Connect</code>使用<code class=\"language-text\">Context</code>做全局状态的通信</h2>\n</li>\n</ul>\n<h2 id=\"overview\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Provider <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Provider'</span>\n<span class=\"token keyword\">import</span> connectAdvanced <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/connectAdvanced'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReactReduxContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Context'</span>\n<span class=\"token keyword\">import</span> connect <span class=\"token keyword\">from</span> <span class=\"token string\">'./connect/connect'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> Provider<span class=\"token punctuation\">,</span> connectAdvanced<span class=\"token punctuation\">,</span> ReactReduxContext<span class=\"token punctuation\">,</span> connect <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，react-redux向外暴露了四个API，分别是<code class=\"language-text\">Provider</code>、<code class=\"language-text\">ConnectAdvanced</code>、<code class=\"language-text\">ReactReduxContext</code>、<code class=\"language-text\">connect</code>。</p>\n<h2 id=\"provider\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provider</h2>\n<p><code class=\"language-text\">Provider</code>是一个<code class=\"language-text\">React Component</code>，在组件<code class=\"language-text\">didMount</code>的时候订阅<code class=\"language-text\">redux</code>的<code class=\"language-text\">store</code>，在<code class=\"language-text\">willUnMount</code>的时候接触订阅，每次<code class=\"language-text\">redux state</code>改变的时候，会调用<code class=\"language-text\">Provider</code>中的<code class=\"language-text\">setState</code>，使得组件刷新，我们来看看部分源代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      store\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>在组件初始化的时候，<code class=\"language-text\">Provider</code>从<code class=\"language-text\">props</code>上获取<code class=\"language-text\">redux</code>上的<code class=\"language-text\">store</code>，并初始化<code class=\"language-text\">state</code>。</p>\n<p>同时在组件<code class=\"language-text\">didMount</code>的时候，这里会向<code class=\"language-text\">redux</code>的<code class=\"language-text\">store</code>上注册<code class=\"language-text\">callback</code>函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newStoreState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>providerState <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the value is the same, skip the unnecessary state update.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>providerState<span class=\"token punctuation\">.</span>storeState <span class=\"token operator\">===</span> newStoreState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> newStoreState <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Actions might have been dispatched between render and mount - handle those</span>\n    <span class=\"token keyword\">const</span> postMountStoreState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postMountStoreState <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> postMountStoreState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里在<code class=\"language-text\">subscribe</code>函数的最后几行的代码，是用来处理在组件<code class=\"language-text\">Provider</code>如果在初次<code class=\"language-text\">render</code>的时候，如果有<code class=\"language-text\">action</code>被<code class=\"language-text\">dispatch</code>，这个时候还没有<code class=\"language-text\">subscribe</code>，但是这时候我们的数据需要刷新，所以这个时候需要去取一次最新数据，如果发现有数据变化，使用<code class=\"language-text\">setState</code>，触发组件刷新。</p>\n<p>在<code class=\"language-text\">render</code>中使用<code class=\"language-text\">Context.Provider</code>将<code class=\"language-text\">context</code>中的内容，即我们这里的<code class=\"language-text\">state</code>注入到<code class=\"language-text\">children</code>组件中。</p>\n<p>从上面的代码可以看到，如果<code class=\"language-text\">redux</code>的<code class=\"language-text\">State</code>发生了变化，会触发顶层组件的刷新，重新<code class=\"language-text\">render</code>，从而重刷整个应用。</p>\n<h2 id=\"connect\"><a href=\"#connect\" aria-label=\"connect permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connect</h2>\n<p><code class=\"language-text\">connect</code>这个函数就是我们经常要使用到的，一般来说在使用<code class=\"language-text\">redux</code>的时候，<code class=\"language-text\">Container</code>组件就是一个<code class=\"language-text\">connect</code>之后的组件。\n<code class=\"language-text\">connect</code>主要的工作就是一是负责从<code class=\"language-text\">state tree</code>上去取组件要用的数据，另外就是在<code class=\"language-text\">state</code>变化的时候，重新计算来自<code class=\"language-text\">state</code>上的<code class=\"language-text\">props</code>。\n我们来看看一个简单版本的<code class=\"language-text\">connect</code>的实现（<a href=\"https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e\">connect explain</a>）:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// connect() is a function that injects Redux-related props into your component.</span>\n<span class=\"token comment\">// You can inject data and callbacks that change that data by dispatching actions.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// It lets us inject component as the last step so people can use it as a decorator.</span>\n  <span class=\"token comment\">// Generally you don't need to worry about it.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// It returns a component</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token comment\">// that renders your component</span>\n          <span class=\"token operator\">&lt;</span>WrappedComponent\n            <span class=\"token punctuation\">{</span><span class=\"token comment\">/* with its props  */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token comment\">/* and additional props calculated from Redux store */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// it remembers to subscribe to the store so it doesn't miss updates</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// and unsubscribe later</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    \n      <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// and whenever the store state changes, it re-renders.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上就是<code class=\"language-text\">connect</code>一个简单版本的实现，<code class=\"language-text\">connect</code>是一个包装过的高阶组件的函数，在第一层接受一个<code class=\"language-text\">selector</code>函数，接收<code class=\"language-text\">redux</code>的<code class=\"language-text\">state</code>和传给组件的<code class=\"language-text\">props</code>， 然后将需要包装的组件传给返回后的函数，最后返回的组件中就可以从<code class=\"language-text\">props</code>上拿到<code class=\"language-text\">redux state</code>上的数据了，上面这个是一个简陋的<code class=\"language-text\">connect</code>实现，我们来看看<code class=\"language-text\">react redux</code>真正的实现。</p>\n<p>我们先来看看<code class=\"language-text\">connect</code>是如何解析我们传入的参数的，<code class=\"language-text\">connect</code>的<code class=\"language-text\">map*</code>传入的格式支持直接传入函数，也可以传入一个<code class=\"language-text\">obejct</code>，来看看<code class=\"language-text\">react-redux</code>是如何支持不同的输入的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// createConnect with default args builds the 'official' connect behavior. Calling it with</span>\n<span class=\"token comment\">// different options opens up some testing and extensibility scenarios</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  connectHOC <span class=\"token operator\">=</span> connectAdvanced<span class=\"token punctuation\">,</span>\n  mapStateToPropsFactories <span class=\"token operator\">=</span> defaultMapStateToPropsFactories<span class=\"token punctuation\">,</span>\n  mapDispatchToPropsFactories <span class=\"token operator\">=</span> defaultMapDispatchToPropsFactories<span class=\"token punctuation\">,</span>\n  mergePropsFactories <span class=\"token operator\">=</span> defaultMergePropsFactories<span class=\"token punctuation\">,</span>\n  selectorFactory <span class=\"token operator\">=</span> defaultSelectorFactory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上，是<code class=\"language-text\">connect.js</code>文件暴露出来的<code class=\"language-text\">connect</code>接口，外面用的时候，是使用的<code class=\"language-text\">createConnect</code>的返回值。\n在这里<code class=\"language-text\">createConnect</code>使用了默认参数，分别是：</p>\n<ul>\n<li><code class=\"language-text\">connectAdvanced</code></li>\n<li><code class=\"language-text\">defaultMapStateToPropsFactories</code></li>\n<li><code class=\"language-text\">defaultMapDispatchToPropsFactories</code></li>\n<li>defaultMergePropsFactories</li>\n<li>defaultSelectorFactory</li>\n</ul>\n<p>我们这里先看和<code class=\"language-text\">props</code>相关的<code class=\"language-text\">defaultMapStateToPropsFactories</code>和<code class=\"language-text\">defaultMapDispatchToPropsFactories</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initMapStateToProps <span class=\"token operator\">=</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>\n      mapStateToProps<span class=\"token punctuation\">,</span>\n      mapStateToPropsFactories<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'mapStateToProps'</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> initMapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>\n      mapDispatchToProps<span class=\"token punctuation\">,</span>\n      mapDispatchToPropsFactories<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'mapDispatchToProps'</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>当调用<code class=\"language-text\">connect</code>的时候，这里会调用<code class=\"language-text\">match</code>函数，来辨别出我们传入的<code class=\"language-text\">mapStateToProps</code>和<code class=\"language-text\">mapDispatchToProps</code>是函数还是<code class=\"language-text\">object</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> factories<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> factories<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> factories<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`Invalid value of type </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> arg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> argument when connecting component </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        options<span class=\"token punctuation\">.</span>wrappedComponentName\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.`</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面就是<code class=\"language-text\">match</code>函数的代码，这里会将我们传入的<code class=\"language-text\">map*</code>函数作为参数，传入给<code class=\"language-text\">mapDispatchToPropsFactories</code>这个工厂函数，我们来这个工厂函数的实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> wrapMapToPropsConstant<span class=\"token punctuation\">,</span> wrapMapToPropsFunc <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./wrapMapToProps'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapStateToPropsIsFunction</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> mapStateToProps <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'mapStateToProps'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapStateToPropsIsMissing</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>mapStateToProps <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>whenMapStateToPropsIsFunction<span class=\"token punctuation\">,</span> whenMapStateToPropsIsMissing<span class=\"token punctuation\">]</span></code></pre></div>\n<p>如上是<code class=\"language-text\">mapStateToPropsFactories</code>的实现，这里<code class=\"language-text\">export</code>出去的是一个<code class=\"language-text\">array</code>，分别是当<code class=\"language-text\">mapStateToProps</code>是函数和没有传入的时候，最后返回的是<code class=\"language-text\">wrapMapToPropsFunc</code>这个函数包装后的函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapToProps<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initProxySelector</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> displayName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里<code class=\"language-text\">wrapMapToPropsFuc</code>，返回值是一个<code class=\"language-text\">(dispatch, { displayName}) =&gt; {}</code>的接口，这里就是工厂函数生成的函数的接口，这个函数也是被<code class=\"language-text\">mapDispatchToProps</code>复用的，生成统一的接口函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bindActionCreators <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> wrapMapToPropsConstant<span class=\"token punctuation\">,</span> wrapMapToPropsFunc <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./wrapMapToProps'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapDispatchToPropsIsFunction</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> mapDispatchToProps <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'mapDispatchToProps'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapDispatchToPropsIsMissing</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>mapDispatchToProps\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsConstant</span><span class=\"token punctuation\">(</span>dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapDispatchToPropsIsObject</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> mapDispatchToProps <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> mapDispatchToProps <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsConstant</span><span class=\"token punctuation\">(</span>dispatch <span class=\"token operator\">=></span>\n        <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  whenMapDispatchToPropsIsFunction<span class=\"token punctuation\">,</span>\n  whenMapDispatchToPropsIsMissing<span class=\"token punctuation\">,</span>\n  whenMapDispatchToPropsIsObject\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>如上是<code class=\"language-text\">mapDispatchToProps</code>的代码，<code class=\"language-text\">mapDisptchToProps</code>支持函数、<code class=\"language-text\">Object</code>、或者不传任何参数，和<code class=\"language-text\">mapStateToProps</code>一样最后也是返回<code class=\"language-text\">(dispatch, { options }) =&gt; {}</code>。在将<code class=\"language-text\">map*</code>函数初始化好之后，后面就是调用一个高阶组件函数，用来接收我们想要从<code class=\"language-text\">redux</code>上获取数据的组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">return</span> <span class=\"token function\">connectHOC</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// used in error messages</span>\n      methodName<span class=\"token punctuation\">:</span> <span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// used to compute Connect's displayName from the wrapped component's displayName.</span>\n      getDisplayName<span class=\"token punctuation\">:</span> name <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Connect(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes</span>\n      shouldHandleStateChanges<span class=\"token punctuation\">:</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// passed through to selectorFactory</span>\n      initMapStateToProps<span class=\"token punctuation\">,</span>\n      initMapDispatchToProps<span class=\"token punctuation\">,</span>\n      initMergeProps<span class=\"token punctuation\">,</span>\n      pure<span class=\"token punctuation\">,</span>\n      areStatesEqual<span class=\"token punctuation\">,</span>\n      areOwnPropsEqual<span class=\"token punctuation\">,</span>\n      areStatePropsEqual<span class=\"token punctuation\">,</span>\n      areMergedPropsEqual<span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// any extra options args can override defaults of connect or connectAdvanced</span>\n      <span class=\"token operator\">...</span>extraOptions\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的代码就是<code class=\"language-text\">connect(map1, map2)</code>的返回值，这里调用了<code class=\"language-text\">connectHOC(connectAdvanced)</code>，我们来看看<code class=\"language-text\">connectAdvanced</code>函数的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token comment\">/* options object*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapWithConnect</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码是<code class=\"language-text\">connectAdvanced</code>函数的接口和返回值，这里接受<code class=\"language-text\">selectorFactory</code>和<code class=\"language-text\">options</code>设置，这里的<code class=\"language-text\">selectorFactory</code>函数就是将我们在上一步调用初始化好的<code class=\"language-text\">map*</code>函数由<code class=\"language-text\">(dispatch, { options }) =&gt; {}</code>的形式转换为<code class=\"language-text\">(stateOrDispatch, ownProps) =&gt; {}</code>的形式。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">finalPropsSelectorFactory</span><span class=\"token punctuation\">(</span>\n  dispatch<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> initMapStateToProps<span class=\"token punctuation\">,</span> initMapDispatchToProps<span class=\"token punctuation\">,</span> initMergeProps<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>options <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mapStateToProps <span class=\"token operator\">=</span> <span class=\"token function\">initMapStateToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token function\">initMapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> mergeProps <span class=\"token operator\">=</span> <span class=\"token function\">initMergeProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">verifySubselectors</span><span class=\"token punctuation\">(</span>\n      mapStateToProps<span class=\"token punctuation\">,</span>\n      mapDispatchToProps<span class=\"token punctuation\">,</span>\n      mergeProps<span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">.</span>displayName\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> selectorFactory <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>pure\n    <span class=\"token operator\">?</span> pureFinalPropsSelectorFactory\n    <span class=\"token punctuation\">:</span> impureFinalPropsSelectorFactory\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">selectorFactory</span><span class=\"token punctuation\">(</span>\n    mapStateToProps<span class=\"token punctuation\">,</span>\n    mapDispatchToProps<span class=\"token punctuation\">,</span>\n    mergeProps<span class=\"token punctuation\">,</span>\n    dispatch<span class=\"token punctuation\">,</span>\n    options\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码就是<code class=\"language-text\">selectorFactory</code>函数的实现，这里首先调用了由<code class=\"language-text\">map</code>工厂函数生成的函数，返回的函数就是由<code class=\"language-text\">wrapMapToPropsFunc</code>返回的函数，这里我们来看看<code class=\"language-text\">wrapMapToPropsFunc</code>的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapToProps<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initProxySelector</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> displayName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">proxy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapToPropsProxy</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps\n        <span class=\"token operator\">?</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">mapToProps</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">mapToProps</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// allow detectFactoryAndVerify to get ownProps</span>\n    proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    proxy<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">mapToProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">detectFactoryAndVerify</span><span class=\"token punctuation\">(</span>\n      stateOrDispatch<span class=\"token punctuation\">,</span>\n      ownProps\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      proxy<span class=\"token punctuation\">.</span>mapToProps <span class=\"token operator\">=</span> mapToProps\n      proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps <span class=\"token operator\">=</span> <span class=\"token function\">getDependsOnOwnProps</span><span class=\"token punctuation\">(</span>mapToProps<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> props <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        proxy<span class=\"token punctuation\">.</span>mapToProps <span class=\"token operator\">=</span> props\n        proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps <span class=\"token operator\">=</span> <span class=\"token function\">getDependsOnOwnProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n        props <span class=\"token operator\">=</span> <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">verifyPlainObject</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> displayName<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> props\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> proxy\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的<code class=\"language-text\">wrapMapToPropsFunc</code>最终返回的是一个<code class=\"language-text\">proxy</code>函数，这个函数的接口是<code class=\"language-text\">(dispatchOrState, ownProps) =&gt; {}</code>，这也我们的<code class=\"language-text\">map*</code>函数的接口相同，这里<code class=\"language-text\">proxy</code>函数主要是处理在第一次运行的时候，如果我们提供的<code class=\"language-text\">map*</code>函数的返回值是<code class=\"language-text\">map</code>函数这种情况，另外就是检测最后我们提供的<code class=\"language-text\">map*</code>函数的返回值是一个<code class=\"language-text\">plain object</code>的情况。</p>\n<p>在拿到真正的<code class=\"language-text\">map*</code>函数后，会判断传入的<code class=\"language-text\">options</code>中<code class=\"language-text\">pure</code>的值来决定使用哪一个<code class=\"language-text\">SelectorFactory</code>函数，默认情况下会使用<code class=\"language-text\">pureFinalPropsSelectorFactory</code>，如果<code class=\"language-text\">pure</code>为<code class=\"language-text\">false</code>的话会使用<code class=\"language-text\">impureFinalPropsSelectorFactory</code>，前一个函数缓存了前一次的<code class=\"language-text\">state</code>，<code class=\"language-text\">ownProps</code>，<code class=\"language-text\">stateProps</code>，<code class=\"language-text\">dispatchProps</code>，<code class=\"language-text\">mergedProps</code>，在第一次调用<code class=\"language-text\">connect</code>的时候，会设置好缓存，在后续的调用中会比较缓存，如果缓存的引用没变，就不会调用<code class=\"language-text\">map*</code>函数生成新的<code class=\"language-text\">props</code>。具体的实现代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pureFinalPropsSelectorFactory</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps<span class=\"token punctuation\">,</span>\n  mergeProps<span class=\"token punctuation\">,</span>\n  dispatch<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> areStatesEqual<span class=\"token punctuation\">,</span> areOwnPropsEqual<span class=\"token punctuation\">,</span> areStatePropsEqual <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hasRunAtLeastOnce <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">let</span> state\n  <span class=\"token keyword\">let</span> ownProps\n  <span class=\"token keyword\">let</span> stateProps\n  <span class=\"token keyword\">let</span> dispatchProps\n  <span class=\"token keyword\">let</span> mergedProps\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleFirstCall</span><span class=\"token punctuation\">(</span>firstState<span class=\"token punctuation\">,</span> firstOwnProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> firstState\n    ownProps <span class=\"token operator\">=</span> firstOwnProps\n    stateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    dispatchProps <span class=\"token operator\">=</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    hasRunAtLeastOnce <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleNewPropsAndNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">.</span>dependsOnOwnProps<span class=\"token punctuation\">)</span>\n      dispatchProps <span class=\"token operator\">=</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleNewProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">.</span>dependsOnOwnProps<span class=\"token punctuation\">)</span>\n      stateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">.</span>dependsOnOwnProps<span class=\"token punctuation\">)</span>\n      dispatchProps <span class=\"token operator\">=</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nextStateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> statePropsChanged <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">areStatePropsEqual</span><span class=\"token punctuation\">(</span>nextStateProps<span class=\"token punctuation\">,</span> stateProps<span class=\"token punctuation\">)</span>\n    stateProps <span class=\"token operator\">=</span> nextStateProps\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statePropsChanged<span class=\"token punctuation\">)</span>\n      mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubsequentCalls</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> propsChanged <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">areOwnPropsEqual</span><span class=\"token punctuation\">(</span>nextOwnProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> stateChanged <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">areStatesEqual</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n    state <span class=\"token operator\">=</span> nextState\n    ownProps <span class=\"token operator\">=</span> nextOwnProps\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propsChanged <span class=\"token operator\">&amp;&amp;</span> stateChanged<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleNewPropsAndNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propsChanged<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleNewProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateChanged<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pureFinalPropsSelector</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> hasRunAtLeastOnce\n      <span class=\"token operator\">?</span> <span class=\"token function\">handleSubsequentCalls</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token function\">handleFirstCall</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上是<code class=\"language-text\">pureFinalPropsSelectorFactory</code>的实现，这里在第一次调用的时候产生一份缓存，后续的调用会检查缓存。</p>\n<p>上面的一连串过程就是<code class=\"language-text\">props</code>如何产生，以及<code class=\"language-text\">props</code>的刷新过程。简要的来说，这里的几个不同的<code class=\"language-text\">factory</code>函数，主要的工作是统一接口，校验传进来的参数，函数接口的转换形式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>mapOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> finalProps</code></pre></div>\n<p>上面就是这几个<code class=\"language-text\">factory</code>函数的主要工作。</p>\n<p>我们继续来看<code class=\"language-text\">connect</code>后续的代码的主要工作是返回一个高阶组件来包装我们的组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectoryFactory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token comment\">/*options object*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">withConnect</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里对这个高阶组件做了几个小的处理，一是对于<code class=\"language-text\">forwardRef</code>的处理，而是对<code class=\"language-text\">Context</code>的处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forwardRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> forwarded <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">forwardConnectRef</span><span class=\"token punctuation\">(</span>\n        props<span class=\"token punctuation\">,</span>\n        ref\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Connect wrapperProps<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">}</span> forwardedRef<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      forwarded<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> displayName\n      forwarded<span class=\"token punctuation\">.</span>WrappedComponent <span class=\"token operator\">=</span> WrappedComponent\n      <span class=\"token keyword\">return</span> <span class=\"token function\">hoistStatics</span><span class=\"token punctuation\">(</span>forwarded<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，如果<code class=\"language-text\">forwardRef</code>为<code class=\"language-text\">true</code>的时候，这个时候，会讲<code class=\"language-text\">ref</code>挂到<code class=\"language-text\">connect</code>包的底层组件上；另外就是对<code class=\"language-text\">context</code>的处理了</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> ContextToUse <span class=\"token operator\">=</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">isContextConsumer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context\n            <span class=\"token punctuation\">:</span> Context\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>indirectRenderWrappedComponent<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">connect</code>的第三个参数支持注入我们自己的<code class=\"language-text\">context</code>，如上的代码，如果我们在<code class=\"language-text\">mergeProps</code>中注入了我们自己的<code class=\"language-text\">context</code>，会优先使用我们自己的<code class=\"language-text\">context</code>，否则就使用<code class=\"language-text\">Provider</code>上提供的<code class=\"language-text\">context</code>。在之前讲的到，<code class=\"language-text\">selectorFactory</code>会讲<code class=\"language-text\">wrapMapToProps</code>包装后的函数<code class=\"language-text\">(dispatch, options) =&gt; {}</code> 转换为<code class=\"language-text\">(stateOrDispatch, ownProps) =&gt; {}</code>。在代码里的体现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> ContextToUse <span class=\"token operator\">=</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">isContextConsumer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context\n            <span class=\"token punctuation\">:</span> Context\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>indirectRenderWrappedComponent<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\t</code></pre></div>\n<p>在<code class=\"language-text\">connect</code>的<code class=\"language-text\">render</code>方法中，调用了<code class=\"language-text\">this.indirectRenderWrappedComponent</code>，这个方法实际上就是<code class=\"language-text\">makeDerivedPropsSelector</code>返回的函数，我们来看看这个方法的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">makeDerivedPropsSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> lastProps\n      <span class=\"token keyword\">let</span> lastState\n      <span class=\"token keyword\">let</span> lastDerivedProps\n      <span class=\"token keyword\">let</span> lastStore\n      <span class=\"token keyword\">let</span> lastSelectorFactoryOptions\n      <span class=\"token keyword\">let</span> sourceSelector\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectDerivedProps</span><span class=\"token punctuation\">(</span>\n        state<span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">,</span>\n        store<span class=\"token punctuation\">,</span>\n        selectorFactoryOptions\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pure <span class=\"token operator\">&amp;&amp;</span> lastProps <span class=\"token operator\">===</span> props <span class=\"token operator\">&amp;&amp;</span> lastState <span class=\"token operator\">===</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> lastDerivedProps\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          store <span class=\"token operator\">!==</span> lastStore <span class=\"token operator\">||</span>\n          lastSelectorFactoryOptions <span class=\"token operator\">!==</span> selectorFactoryOptions\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          lastStore <span class=\"token operator\">=</span> store\n          lastSelectorFactoryOptions <span class=\"token operator\">=</span> selectorFactoryOptions\n          sourceSelector <span class=\"token operator\">=</span> <span class=\"token function\">selectorFactory</span><span class=\"token punctuation\">(</span>\n            store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">,</span>\n            selectorFactoryOptions\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        lastProps <span class=\"token operator\">=</span> props\n        lastState <span class=\"token operator\">=</span> state\n\n        <span class=\"token keyword\">const</span> nextProps <span class=\"token operator\">=</span> <span class=\"token function\">sourceSelector</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>\n\n        lastDerivedProps <span class=\"token operator\">=</span> nextProps\n        <span class=\"token keyword\">return</span> lastDerivedProps\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到在第一次运行，更换<code class=\"language-text\">store</code>或更换<code class=\"language-text\">selectorFactoryOptions</code>\u0010的时候，会重新获取<code class=\"language-text\">store</code>和<code class=\"language-text\">selectorFactoryOptions</code>，这块函数就是每次<code class=\"language-text\">context</code>刷新或者<code class=\"language-text\">props change</code>的时候，调用当前的<code class=\"language-text\">map*</code>函数，生成新的<code class=\"language-text\">props</code>或者是使用旧的<code class=\"language-text\">props</code>。最后调用<code class=\"language-text\">makeChildElementSelector</code>将计算好的props，要渲染的组件，以及要转发的<code class=\"language-text\">ref</code>传进去，可以看到这里的刷新也是有一层缓存的，如果传入的这些东西还是上一次的话，这里还是会返回上一次渲染的组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">function</span> <span class=\"token function\">makeChildElementSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> lastChildProps<span class=\"token punctuation\">,</span> lastForwardRef<span class=\"token punctuation\">,</span> lastChildElement<span class=\"token punctuation\">,</span> lastComponent\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectChildElement</span><span class=\"token punctuation\">(</span>\n        WrappedComponent<span class=\"token punctuation\">,</span>\n        childProps<span class=\"token punctuation\">,</span>\n        forwardRef\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          childProps <span class=\"token operator\">!==</span> lastChildProps <span class=\"token operator\">||</span>\n          forwardRef <span class=\"token operator\">!==</span> lastForwardRef <span class=\"token operator\">||</span>\n          lastComponent <span class=\"token operator\">!==</span> WrappedComponent\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          lastChildProps <span class=\"token operator\">=</span> childProps\n          lastForwardRef <span class=\"token operator\">=</span> forwardRef\n          lastComponent <span class=\"token operator\">=</span> WrappedComponent\n          lastChildElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>childProps<span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>forwardRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> lastChildElement\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>在没有转发<code class=\"language-text\">ref</code>的情况下，<code class=\"language-text\">connect</code>组件会返回：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">return</span> <span class=\"token function\">hoistStatics</span><span class=\"token punctuation\">(</span>Connect<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的<code class=\"language-text\">hoistStatics</code>函数是为了将<code class=\"language-text\">WrapperComponent</code>上的静态属性复制到<code class=\"language-text\">Connect</code>的组件上；原因在于，如果原始的组件上有一个静态方法，在<code class=\"language-text\">connect</code>之后的组件暴露出去用的时候，这个组件实际上是访问不到的，所以要把一些静态属性拷到高阶组件上去。</p>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"React-Redux源码剖析","date":"January 26, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-1-26-ReactRedux源码解读/","previous":{"fields":{"slug":"/2019-1-19-HowReactReduxWorks/"},"frontmatter":{"title":"如何使用React—Redux","category":"Tech"}},"next":{"fields":{"slug":"/development/third/"},"frontmatter":{"title":"Third Post","category":"development"}}}}