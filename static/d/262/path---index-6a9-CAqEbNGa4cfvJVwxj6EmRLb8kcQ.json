{"data":{"site":{"siteMetadata":{"title":"Bee starter","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Getting Started 😎 1. Create a Gatsby site. If you are not using  , following  Gatsby Getting Started 2. Start developing. 3. Add your content You can write… contents to blog in   directory. resume   …","fields":{"slug":"/development/quick_start/"},"frontmatter":{"date":"May 31, 2019","title":"Quick Start","category":"development"}}},{"node":{"excerpt":"上一篇博客 Javascript模块化 介绍了前端的模块化的一些方案和历史，基于浏览器的 规范 ，我们尝试自己实现一个 。 AMD Loader要解决的问题 主要是为了解决浏览器端的模块化，实现 的话，以下的点要考虑到： 前端的加载是异步的 模块的依赖也是模块（可能会出现循环依赖的问题） 每个Module只加载一次 暴露  和 其实我们主要要解决的点在于，如何处理 的加载。 加载要解决两个主要问…","fields":{"slug":"/2019-2-23-WriteYourOwnAmdLoader/"},"frontmatter":{"date":"February 23, 2019","title":"自己动手写AMD Loader","category":"Frontend"}}},{"node":{"excerpt":"TL:DR; 前端模块化主要是解决依赖管理，模块加载的问题 立即调用函数的匿名闭包是模块化实现的基石 在客户端和服务端都需要做模块化 CommonJS是服务端的模块化解决方案，模块同步加载 AMD是客户端（浏览器）的模块化方案，模块异步加载 UMD统一了客户端和服务端，兼容AMD和CommonJS ES6提供了官方的模块化（import/export）  在写 的时候，会经常会听到模块化这个概念…","fields":{"slug":"/2019-2-06-Javascript模块化/"},"frontmatter":{"date":"February 06, 2019","title":"Javascript模块化","category":"Frontend Javascript"}}},{"node":{"excerpt":"Welcome, Gatsby! This starter is full-package for your new blog! 1. Support Three frontmatter title date category 2. Code highlighting With  Fira Code  font Support highlighting with  prism \n2-1. Use…","fields":{"slug":"/development/hello/"},"frontmatter":{"date":"February 06, 2019","title":"Welcome Bee starter","category":"development"}}},{"node":{"excerpt":"Second Post","fields":{"slug":"/development/second/"},"frontmatter":{"date":"February 03, 2019","title":"Second Post","category":"development"}}},{"node":{"excerpt":"Third Post","fields":{"slug":"/development/third/"},"frontmatter":{"date":"February 01, 2019","title":"Third Post","category":"development"}}},{"node":{"excerpt":"TL;DR; 本质上是一个高阶组件 会对组件做缓存控制 使用 做全局状态的通信 Overview 如上，react-redux向外暴露了四个API，分别是 、 、 、 。 Provider 是一个 ，在组件 的时候订阅 的 ，在 的时候接触订阅，每次 改变的时候，会调用 中的 ，使得组件刷新，我们来看看部分源代码： 在组件初始化的时候， 从 上获取 上的 ，并初始化 。 同时在组件 的时候，这里…","fields":{"slug":"/2019-1-26-ReactRedux源码解读/"},"frontmatter":{"date":"January 26, 2019","title":"React-Redux源码剖析","category":"Reacy Redux Frontend"}}},{"node":{"excerpt":"在构建基于 的 应用的时候，我们往往需要使用 做数据绑定，当 中的数据刷新的时候，通知所有用到数据的组建刷新， 提供了对 组件的订阅发布的能力。 我们为什么需要React-Redux 如果你熟悉 的话，我们知道在 中我们会维护一个全局的 ， 中存储了当前 中的数据，如果组件需要使用 中的数据，有两种办法，第一种是一层一层将 传下去，组件从 上去取 ，然后取自己要用到的数据，很显然，这不是一个好的…","fields":{"slug":"/2019-1-19-HowReactReduxWorks/"},"frontmatter":{"date":"January 19, 2019","title":"如何使用React—Redux","category":"React Redux"}}},{"node":{"excerpt":"工作之后，自己的个人时间就变的少了，不像上学的时候那样有很多时间能自由安排，刚参加工作的时候自己的时间管理更是混乱，经常性的就是觉得这个周什么都没干，一个周就过去了，做事学东西也没有一个好的进度和时间的跟踪，在意识到这个问题之后，决定改变这个不好的习惯，自己也建立了一套自己的时间管理系统，很好的改善了当前的情况。这里主要是介绍自己的一些使用的工具，以及如何使用这些应用规划自己的时间。 Googl…","fields":{"slug":"/2019-1-12-HowToBuildYourOwnTimeSystem/"},"frontmatter":{"date":"January 12, 2019","title":"我是怎样构建自己的时间管理系统的","category":"个人管理"}}},{"node":{"excerpt":"TL;DR; 在 、 的应用中，使用 来做性能优化是常见的优化手段 默认只有一份 ， 命中的策略是浅比较，引用改变了会导致 失效 支持定制 函数和 命中策略 在开发 前端应用的时候，我们经常会使用 做状态管理，但是随着前端代码的复杂度的上升，会引入 作为性能优化的手段之一，这篇文章就Reselect的一些应用场景作一些介绍。 什么是Selector 在介绍 的之前，我们首先要知道 这个概念，那么…","fields":{"slug":"/2018-12-29-Reselect/"},"frontmatter":{"date":"December 29, 2018","title":"如何使用Reselect做性能优化","category":"React Redux"}}},{"node":{"excerpt":"TL;DR; 前端打包中会将多个module打包成一个bundle发给客户端，但是各个module中存在并不会使用到的东西，dead code elimination是一种可以消除这些代码的技术 Tree Shaking是Dead code elimination（简称DCE）的一种实现 Webpack中的tree shaking需要es6的 的支持 Webpack中的tree shaking仅…","fields":{"slug":"/2018-12-22-TreeShaking/"},"frontmatter":{"date":"December 22, 2018","title":"Tree Shaking","category":"Frontend 前端构建"}}},{"node":{"excerpt":"在整个项目的开发过程中，开发人员在编写代码之前，往往会制定相关的代码规范，虽然写完代码之后有code review的过程，但是难免会有code review发现不了的问题，往往一些潜在的bug或者坏味道的代码会出现在项目中,\b这时候如果有一个自动\b检查代码规范的工具，\b就能有效的避免一些问题，SonarQube就是提供了这样一个能力的工具\b，\b刚好前段时间我负责集成SonarQube\u001c的服务到我…","fields":{"slug":"/2018-12-15-集成Sonarqube到项目/"},"frontmatter":{"date":"December 15, 2018","title":"集成SonarQube到你的项目中","category":"Sonarqube Code Quality"}}},{"node":{"excerpt":"2018就这样过去了，从参加工作到现在，也工作也一年多了，现在自己也不再像刚毕业一样，在面对工作生活中的出现的一些麻烦问题慌张，不知所措，但是同时也要面对更复杂和麻烦的问题；2018年初的时候自己定过一些目标，虽然并没有100%都完成掉，但是主线都是在向这个目标靠近；在这一年里自己也有很多对工作、生活、学习的思考。 2018的目标完成了多少？ \n上图是当时在18年初定的目标，先说一说年初的时候为…","fields":{"slug":"/2018-1-05-MyYearOf2018/"},"frontmatter":{"date":"January 05, 2018","title":"My Year Of 2018","category":"Life"}}},{"node":{"excerpt":"    偶然的一个机会了解到V2EX这个网站，顺手搜了一下V站创始人的信息， Livid（刘昕）是谁？ ，Livid中文名刘昕，V2EX论坛作者。顺道看了一下Livid的一篇文章 26岁写给18岁的自己 我知道现在的自己是再也回不去的了。可是倘若有机会，我是多么希望能让 18 岁的你在一个晴朗的，没有负担的午后读到这封信，并且多么希望你能够将它读上好多遍。 这样的场景或许只会发生在奇幻电影中，2…","fields":{"slug":"/2016-11-26-写给25岁的自己/"},"frontmatter":{"date":"November 26, 2016","title":"在21岁的时候写给25岁的自己","category":"Life"}}},{"node":{"excerpt":"    找工作的事情总算是告一段落，在资本寒冬来临的时候，自己也是十分好运的搭上了互联网的末班车，比起身边其他人，我找工作的过程也没有多艰辛，暑期的时候同学内推了现在的公司，然后视频面试，两轮技术面，一轮hr面，9月初的时候拿到了意向offer，9月底的时候拿到了正式的聘用书，拿到意向offer后基本上就没跑过招聘会，但是等到9月底的时候实在是等到崩溃了，在学校笔试了几个公司，去西电笔试了一场，…","fields":{"slug":"/2016-10-02-愿路途不再往复，愿无岁月可回头/"},"frontmatter":{"date":"October 02, 2016","title":"愿路途不再往复","category":"Life"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}