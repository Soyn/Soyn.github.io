{"data":{"site":{"siteMetadata":{"title":"Move fast and break things.","author":"wang yao","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"Soyn/Soyn.github.io.git"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"67f476c2-708a-546f-bead-05393848cf43","excerpt":"在构建基于 的 应用的时候，我们往往需要使用 做数据绑定，当 中的数据刷新的时候，通知所有用到数据的组建刷新， 提供了对 组件的订阅发布的能力。 我们为什么需要React-Redux…","html":"<p>在构建基于<code class=\"language-text\">Redux</code>的<code class=\"language-text\">React</code>应用的时候，我们往往需要使用<code class=\"language-text\">React-Redux</code>做数据绑定，当<code class=\"language-text\">Redux</code>中的数据刷新的时候，通知所有用到数据的组建刷新，<code class=\"language-text\">React-Redux</code>提供了对<code class=\"language-text\">React</code>组件的订阅发布的能力。</p>\n<h2 id=\"我们为什么需要react-redux\"><a href=\"#%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81react-redux\" aria-label=\"我们为什么需要react redux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>我们为什么需要React-Redux</h2>\n<p>如果你熟悉<code class=\"language-text\">Redux</code>的话，我们知道在<code class=\"language-text\">Redux</code>中我们会维护一个全局的<code class=\"language-text\">store</code>，<code class=\"language-text\">store</code>中存储了当前<code class=\"language-text\">App</code>中的数据，如果组件需要使用<code class=\"language-text\">store</code>中的数据，有两种办法，第一种是一层一层将<code class=\"language-text\">store</code>传下去，组件从<code class=\"language-text\">props</code>上去取<code class=\"language-text\">store</code>，然后取自己要用到的数据，很显然，这不是一个好的办法，如果存在一个嵌套很深的组件，那么<code class=\"language-text\">store</code>会从最顶层传到最下面，这对于代码的维护和可读性并不是很友好；第二种办法就是使用<code class=\"language-text\">React</code>提供的<code class=\"language-text\">context</code>，在要使用全局状态的时候，从<code class=\"language-text\">context</code>上去取，但是在<code class=\"language-text\">React 16.4.0</code>之前，<code class=\"language-text\">React</code>官方是不推荐使用<code class=\"language-text\">context</code>的，原因在于，当<code class=\"language-text\">context</code>中的值刷新的时候，是从上到下刷新的，如果中间有组件的<code class=\"language-text\">shouldComponentUpdate</code>返回了<code class=\"language-text\">false</code>，这个组件下面的组件就收不到更新后的值；而<code class=\"language-text\">React-Redux</code>实现了订阅发布的模式，保证使用了<code class=\"language-text\">store</code>的组件在数据更新的时候可以得到通知。</p>\n<p>在<code class=\"language-text\">React 16.4.0</code>之后官方将<code class=\"language-text\">createContext</code>暴露出来了，以上的问题不会出现，但是是不是意味着，可以用<code class=\"language-text\">context</code>来替代<code class=\"language-text\">redux</code>呢？理论上是可以的，但是并不推荐这样做，因为在<code class=\"language-text\">redux</code>的发展中，其生态系统是非常繁荣的，用<code class=\"language-text\">Redux</code>能避免重复造轮子的窘境。</p>\n<h2 id=\"react-redux给我们提供了哪些能力？\"><a href=\"#react-redux%E7%BB%99%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E8%83%BD%E5%8A%9B%EF%BC%9F\" aria-label=\"react redux给我们提供了哪些能力？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Redux给我们提供了哪些能力？</h2>\n<ul>\n<li>Container 组件和Presentational组件</li>\n</ul>\n<p><code class=\"language-text\">React</code>背后的思想是<code class=\"language-text\">UI组件</code>是一个函数，一个大的<code class=\"language-text\">Web App</code>就是一个由不同函数组成的大的函数；在处理这些组件时，我们遵循这样一个原则，根据职责将组件分为<code class=\"language-text\">container组件</code>和<code class=\"language-text\">presentational</code>组件，前者负责提供数据，后者接受数据，只负责展示；对于后者是对<code class=\"language-text\">redux</code>无感的，只负责从<code class=\"language-text\">props</code>上取数据，然后渲染。</p>\n<p><code class=\"language-text\">react-redux</code>的<code class=\"language-text\">connect</code>函数就提供了生成一个<code class=\"language-text\">container</code>组件负责和<code class=\"language-text\">store</code>进行交互，我们自己的组件就只用负责渲染就可以，数据的交互不用操心；<code class=\"language-text\">connect</code>将数据的来源抽象出来，使得我们的组件复用性更好。</p>\n<ul>\n<li>React-Redux的性能优化</li>\n</ul>\n<p>虽然<code class=\"language-text\">React</code>在数据更新的时候有着很好的性能，每次<code class=\"language-text\">React</code>刷新的时候是从父组件渲染到叶子组件，这里带来的问题就是，在子组件中数据没有发生变化，但是却重复渲染了，这种问题积少成多会导致性能问题，<code class=\"language-text\">react redux</code>在其内部提供了对应的性能优化，当组件的数据没有发生变化的时候，这个组件并不会重新渲染。</p>\n<h2 id=\"如何使用react-redux\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8react-redux\" aria-label=\"如何使用react redux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用React Redux</h2>\n<p><code class=\"language-text\">react-redux</code>的核心<code class=\"language-text\">API</code>就三个，经常使用到的就两个，分别是：\n- <code class=\"language-text\">connect</code>\n- <code class=\"language-text\">Provider</code>\n- <code class=\"language-text\">ConnectAdvanced</code></p>\n<p>这里先来说说<code class=\"language-text\">Provider</code>的用法，简单来说就是<code class=\"language-text\">Provider</code>是一个容器组件，在你需要使用<code class=\"language-text\">react redux</code>管理你的<code class=\"language-text\">redux store</code>的时候，将你的<code class=\"language-text\">App</code>用<code class=\"language-text\">Provider</code>包起来，这样<code class=\"language-text\">Provider</code>下的所有组件都可以通过<code class=\"language-text\">connect</code>来获取<code class=\"language-text\">store</code>上存储的数据了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./demos/reactReduxDemo/counter'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> counterStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./demos/reactReduxDemo/configStore'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counterStore<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>  <span class=\"token comment\">// 将store注入到Provider中</span>\n        <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，我们将<code class=\"language-text\">store</code>注入到组件中，当数据发生变化的时候，会通知<code class=\"language-text\">Provider</code>下的所有订阅了<code class=\"language-text\">store</code>的组件更新。</p>\n<p>在我们将<code class=\"language-text\">store</code>注入之后，其下的组件如果需要使用<code class=\"language-text\">store</code>中的数据，就需要使用<code class=\"language-text\">connect</code>这个<code class=\"language-text\">API</code>。\n<code class=\"language-text\">connect</code>其实就是一个高阶组件（传入一个组件，返回一个组件），这里<code class=\"language-text\">connect</code>的接口参数如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">,</span> mergeProps<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的<code class=\"language-text\">mapStateToProps</code>主要是用来从<code class=\"language-text\">store</code>中获取数据的函数，这里的函数接口如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上这里的<code class=\"language-text\">state</code>就是<code class=\"language-text\">store</code>，在<code class=\"language-text\">mapStateProps</code>中我们可以拿到整个应用的数据，在<code class=\"language-text\">mapStateToProps</code>中可以拿到我们需要的数据，另外一个参数<code class=\"language-text\">ownProps</code>是父组件传给子组件的<code class=\"language-text\">props</code>。\n另外一个函数<code class=\"language-text\">mapDispatchToProps</code>，这里的函数的参数接口如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上这里的<code class=\"language-text\">dispatch</code>就是<code class=\"language-text\">redux</code>中的<code class=\"language-text\">dispatch</code>，当我们需要改变<code class=\"language-text\">state</code>的时候，就需要<code class=\"language-text\">dispatch action</code>，在<code class=\"language-text\">connect</code>中如果没有传入<code class=\"language-text\">mapDispatchToProps</code>的话，会将<code class=\"language-text\">dispatch</code>作为<code class=\"language-text\">props</code>传入组件；<code class=\"language-text\">mapDispatchToProps</code>的函数的返回值是一个<code class=\"language-text\">object</code>，函数的<code class=\"language-text\">value</code>就是一个<code class=\"language-text\">action creator</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tfoo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">myAcion</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，这里的<code class=\"language-text\">foo</code>在组件中可以通过<code class=\"language-text\">props</code>访问到，这里最好将组件中的<code class=\"language-text\">action creator</code>放在<code class=\"language-text\">mapDispatchToProps</code>中，不要暴露<code class=\"language-text\">dispatch</code>到组件中，避免将<code class=\"language-text\">redux</code>暴露给组件中，这样组件对<code class=\"language-text\">redux</code>是无感的，组件的复用性更高。\n如下，如果一个组件需要从<code class=\"language-text\">store</code>上获取数据，使用<code class=\"language-text\">connect</code>将组件包起来：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n\t\tmapState<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\tmergeProps<span class=\"token punctuation\">,</span>\n\t\toptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上的方式使用<code class=\"language-text\">connect</code>，<code class=\"language-text\">MyComponent</code>中的<code class=\"language-text\">props</code>就可以拿到<code class=\"language-text\">dispatch</code>。\n就像上面说的，并不推荐直接将<code class=\"language-text\">dispatch</code>直接传给组件，将<code class=\"language-text\">action creator</code>包装成一个函数传给组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tincrement<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'\tINCREASE'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tdecrement<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'DESCREASE'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ConnectAdvanced</code>是<code class=\"language-text\">react-redux</code>提供的最后一个<code class=\"language-text\">API</code>，这个<code class=\"language-text\">API</code>是5.0之后提供的，这个方法主要是提供定制化的<code class=\"language-text\">connect</code>，由开发者自己实现缓存和<code class=\"language-text\">props check</code>，<code class=\"language-text\">connect</code>内部就是使用<code class=\"language-text\">connectAdvanced</code>实现，它也是一个高阶组件，其函数接口如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">,</span> connectOptions<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上，其中的<code class=\"language-text\">selectorFactory</code>就是产生<code class=\"language-text\">mapStateToProps + mapDispatchToProps</code>的工厂函数，起接口及其作用如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nextFinalProps</code></pre></div>\n<p>我们会在<code class=\"language-text\">(dispatch, options) =&gt; {}</code>这一层将我们的<code class=\"language-text\">action creator</code>函数以及最终传给组件的<code class=\"language-text\">props</code>对象创建好，在第二层闭包<code class=\"language-text\">nextState, nextOwnProps</code>中会在<code class=\"language-text\">redux state</code>刷新的时候拿到最新的<code class=\"language-text\">state</code>和<code class=\"language-text\">props</code>，在这一层会做缓存的命中，如果最新的<code class=\"language-text\">props</code>中变更的数据影响当前组件，会更新在第一层闭包中缓存好的最终需要传给组件的<code class=\"language-text\">props</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> actionCreators <span class=\"token keyword\">from</span> <span class=\"token string\">'./actionCreators'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bindActionCreators <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectorFactory</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> ownProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> text <span class=\"token operator\">=></span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span>ownProps<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">[</span>nextOwnProps<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> nextResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>nextOwnProps<span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">,</span> addTodo <span class=\"token punctuation\">}</span>\n    ownProps <span class=\"token operator\">=</span> nextOwnProps\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> nextResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> nextResult\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TodoApp<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"如何使用React—Redux","date":"January 19, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-1-19-HowReactReduxWorks/","previous":{"fields":{"slug":"/2019-1-12-HowToBuildYourOwnTimeSystem/"},"frontmatter":{"title":"我是怎样构建自己的时间管理系统的","category":"Life"}},"next":{"fields":{"slug":"/2019-1-26-ReactRedux源码解读/"},"frontmatter":{"title":"React-Redux源码剖析","category":"Tech"}}}}