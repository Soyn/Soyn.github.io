{"data":{"site":{"siteMetadata":{"title":"Move fast and break things.","author":"wang yao","siteUrl":"http://cuteshilina.com/","comment":{"disqusShortName":"","utterances":"Soyn/Soyn.github.io.git"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"c36efad7-0d7b-5802-b06b-ebdda3165a82","excerpt":"在前端的学习中，经常会听到双向绑定（ MVVM ）这个概念，双向绑定的概念很简单，就是视图（ View ）上的更新能够实时更新数据层（ Model ），同时数据层的更新也会实时更新到视图层。不同于 MVC 的数据单向流动（从数据层到视图层），那么如何实现数据和视图的双向绑定呢？\n实现数据的双向绑定，首先我们要搞明白面临的问题： 如何监听试图层的变化？ 视图层变化之后如何更新到数据层？ 如何监听数据层的变化？ 如何将数据层的变化更新到视图层？ 视图层的更新主要是来自用户的输入行为（输入、点击等），我们可以通过监听事件的方式（ keyup 、 keydown…","html":"<p>在前端的学习中，经常会听到双向绑定（<code>MVVM</code>）这个概念，双向绑定的概念很简单，就是视图（<code>View</code>）上的更新能够实时更新数据层（<code>Model</code>），同时数据层的更新也会实时更新到视图层。不同于<code>MVC</code>的数据单向流动（从数据层到视图层），那么如何实现数据和视图的双向绑定呢？\n实现数据的双向绑定，首先我们要搞明白面临的问题：</p>\n<ul>\n<li>如何监听试图层的变化？</li>\n<li>视图层变化之后如何更新到数据层？</li>\n<li>如何监听数据层的变化？</li>\n<li>如何将数据层的变化更新到视图层？</li>\n</ul>\n<p>视图层的更新主要是来自用户的输入行为（输入、点击等），我们可以通过监听事件的方式（<code>keyup</code>、<code>keydown</code>等），在事件回调中获取视图层的更新，将更新同步到数据层上，由于数据层的更新，我们再用数据去刷视图层，这样就是实现了双向绑定，从网上获取的资料来看，主要有以下几种实现方式：</p>\n<h1>手动绑定</h1>\n<p>这里手动绑定的意思是，在<code>DOM</code>上绑定事件回调，在事件回调函数值中去更新数据层和重新渲染视图，简单的实现如下：\n<img src=\"./images/handSetHTML.png\" alt=\"HandSetHtml\">\n如上，我们在<code>HTML</code>中有一个<code>input</code>元素用来输入，另一个<code>div</code>元素用来显示输入的元素；在这两个元素上我们声明了特定的属性<code>q-value</code>和<code>q-text</code>，这两个属性名标示着和数据层的绑定关系，如下，是相关的JS代码：\n<img src=\"./images/handSetJs.png\" alt=\"handset\">\n这里我们实现双向绑定的思路是，视图层对数据的绑定是通过特定的属性<code>q-*</code>，来将<code>UI</code>和<code>Model</code>绑定起来，使用事件回调监测数据的变化，更新数据，然后刷新<code>UI</code>。</p>\n<h1>脏检测</h1>\n<p><code>AngularJS</code>的数据双向绑定是基于脏检查的机制，脏检查的大致实现思想是，在数据层上维护变量的当前值，当视图层上的操作引起数据更新时，会执行脏检测，如果有绑定的变量的值发生了变化，变量对应的指令就会刷新数据绑定的<code>UI</code>；同样的脏检查机制的实现，我们在<code>DOM</code>上的也有绑定两个东西，一个是数据层上的变量的应用，<code>UI</code>更新的时候更新对应的变量，然后另外就是绑定的指令，用来执行具体的<code>UI</code>层面的更新逻辑。\n<img src=\"./images/dirtyCheckHTML.png\" alt=\"dirtyCheckHtml\">\n<img src=\"./images/dirtyCheckJs.png\" alt=\"dirtyCheckJs\"></p>\n<h1>数据劫持</h1>\n<p>实现双向绑定的另一种方式是，使用数据劫持的方式，给数据层的属性定制<code>getter</code>和<code>setter</code>，在<code>UI</code>上触发了回调函数更新数据的时候，会调到我们定制的<code>setter</code>中，在<code>setter</code>中会刷新<code>UI</code>。\n<img src=\"./images/hiijackingHTML.png\" alt=\"hijackingHTML\">\n<img src=\"./images/hijackingJs.png\" alt=\"hijackingJs\">\n在<code>DOM</code>属性上我们只需要指明引用的变量，具体的<code>UI</code>刷新逻辑定义在<code>setter</code>中。</p>\n<p>以上是实现一个双向绑定的常见手段，这里只是了解大致的原理，具体到不同的前端框架中实现的双向绑定，比文章中介绍的更复杂和更健壮，这里只是了解其原理，抓住主要实现原理，框架层面的实现也是基于这些原理来做的。\n文中的<a href=\"https://github.com/Soyn/demos/tree/master/mvvm\">Demo Code</a></p>\n<h1>Refrence</h1>\n<ul>\n<li><a href=\"https://jixianqianduan.com/frontend-javascript/2015/11/29/js-data-two-ways-binding.html\">javascript实现数据双向绑定的三种方式</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004681757\">JavaScript数据双向绑定的简单演示 - 前端知识点小结 - SegmentFault 思否</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25464162\">数据双向绑定的分析和简单实现 - 知乎</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"双向绑定","date":"June 15, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-6-15-mvvm/","previous":{"fields":{"slug":"/2019-5-11-sameOriginPolicy/"},"frontmatter":{"title":"浏览器同源策略","category":"Tech"}},"next":{"fields":{"slug":"/tech/平滑滚动/"},"frontmatter":{"title":"使用Passive event保证平滑滚动","category":"tech"}}}}