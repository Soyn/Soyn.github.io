{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"21db0225-26dc-57ea-afbe-fed0d36b960a","excerpt":"Your name Thank you for reading my resume. If you want to contact me, Please send me an email.","html":"<h1 id=\"your-name\"><a href=\"#your-name\" aria-label=\"your name permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your name</h1>\n<div align=\"center\">\n<p><em>Thank you for reading my resume. If you want to contact me, Please send me an email.</em></p>\n</div>","frontmatter":{"title":"about","date":"January 27, 2019","lang":"en"}}},{"node":{"id":"67f476c2-708a-546f-bead-05393848cf43","excerpt":"在构建基于 的 应用的时候，我们往往需要使用 做数据绑定，当 中的数据刷新的时候，通知所有用到数据的组建刷新， 提供了对 组件的订阅发布的能力。 我们为什么需要React-Redux…","html":"<p>在构建基于<code class=\"language-text\">Redux</code>的<code class=\"language-text\">React</code>应用的时候，我们往往需要使用<code class=\"language-text\">React-Redux</code>做数据绑定，当<code class=\"language-text\">Redux</code>中的数据刷新的时候，通知所有用到数据的组建刷新，<code class=\"language-text\">React-Redux</code>提供了对<code class=\"language-text\">React</code>组件的订阅发布的能力。</p>\n<h2 id=\"我们为什么需要react-redux\"><a href=\"#%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81react-redux\" aria-label=\"我们为什么需要react redux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>我们为什么需要React-Redux</h2>\n<p>如果你熟悉<code class=\"language-text\">Redux</code>的话，我们知道在<code class=\"language-text\">Redux</code>中我们会维护一个全局的<code class=\"language-text\">store</code>，<code class=\"language-text\">store</code>中存储了当前<code class=\"language-text\">App</code>中的数据，如果组件需要使用<code class=\"language-text\">store</code>中的数据，有两种办法，第一种是一层一层将<code class=\"language-text\">store</code>传下去，组件从<code class=\"language-text\">props</code>上去取<code class=\"language-text\">store</code>，然后取自己要用到的数据，很显然，这不是一个好的办法，如果存在一个嵌套很深的组件，那么<code class=\"language-text\">store</code>会从最顶层传到最下面，这对于代码的维护和可读性并不是很友好；第二种办法就是使用<code class=\"language-text\">React</code>提供的<code class=\"language-text\">context</code>，在要使用全局状态的时候，从<code class=\"language-text\">context</code>上去取，但是在<code class=\"language-text\">React 16.4.0</code>之前，<code class=\"language-text\">React</code>官方是不推荐使用<code class=\"language-text\">context</code>的，原因在于，当<code class=\"language-text\">context</code>中的值刷新的时候，是从上到下刷新的，如果中间有组件的<code class=\"language-text\">shouldComponentUpdate</code>返回了<code class=\"language-text\">false</code>，这个组件下面的组件就收不到更新后的值；而<code class=\"language-text\">React-Redux</code>实现了订阅发布的模式，保证使用了<code class=\"language-text\">store</code>的组件在数据更新的时候可以得到通知。</p>\n<p>在<code class=\"language-text\">React 16.4.0</code>之后官方将<code class=\"language-text\">createContext</code>暴露出来了，以上的问题不会出现，但是是不是意味着，可以用<code class=\"language-text\">context</code>来替代<code class=\"language-text\">redux</code>呢？理论上是可以的，但是并不推荐这样做，因为在<code class=\"language-text\">redux</code>的发展中，其生态系统是非常繁荣的，用<code class=\"language-text\">Redux</code>能避免重复造轮子的窘境。</p>\n<h2 id=\"react-redux给我们提供了哪些能力？\"><a href=\"#react-redux%E7%BB%99%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E8%83%BD%E5%8A%9B%EF%BC%9F\" aria-label=\"react redux给我们提供了哪些能力？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Redux给我们提供了哪些能力？</h2>\n<ul>\n<li>Container 组件和Presentational组件</li>\n</ul>\n<p><code class=\"language-text\">React</code>背后的思想是<code class=\"language-text\">UI组件</code>是一个函数，一个大的<code class=\"language-text\">Web App</code>就是一个由不同函数组成的大的函数；在处理这些组件时，我们遵循这样一个原则，根据职责将组件分为<code class=\"language-text\">container组件</code>和<code class=\"language-text\">presentational</code>组件，前者负责提供数据，后者接受数据，只负责展示；对于后者是对<code class=\"language-text\">redux</code>无感的，只负责从<code class=\"language-text\">props</code>上取数据，然后渲染。</p>\n<p><code class=\"language-text\">react-redux</code>的<code class=\"language-text\">connect</code>函数就提供了生成一个<code class=\"language-text\">container</code>组件负责和<code class=\"language-text\">store</code>进行交互，我们自己的组件就只用负责渲染就可以，数据的交互不用操心；<code class=\"language-text\">connect</code>将数据的来源抽象出来，使得我们的组件复用性更好。</p>\n<ul>\n<li>React-Redux的性能优化</li>\n</ul>\n<p>虽然<code class=\"language-text\">React</code>在数据更新的时候有着很好的性能，每次<code class=\"language-text\">React</code>刷新的时候是从父组件渲染到叶子组件，这里带来的问题就是，在子组件中数据没有发生变化，但是却重复渲染了，这种问题积少成多会导致性能问题，<code class=\"language-text\">react redux</code>在其内部提供了对应的性能优化，当组件的数据没有发生变化的时候，这个组件并不会重新渲染。</p>\n<h2 id=\"如何使用react-redux\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8react-redux\" aria-label=\"如何使用react redux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用React Redux</h2>\n<p><code class=\"language-text\">react-redux</code>的核心<code class=\"language-text\">API</code>就三个，经常使用到的就两个，分别是：\n- <code class=\"language-text\">connect</code>\n- <code class=\"language-text\">Provider</code>\n- <code class=\"language-text\">ConnectAdvanced</code></p>\n<p>这里先来说说<code class=\"language-text\">Provider</code>的用法，简单来说就是<code class=\"language-text\">Provider</code>是一个容器组件，在你需要使用<code class=\"language-text\">react redux</code>管理你的<code class=\"language-text\">redux store</code>的时候，将你的<code class=\"language-text\">App</code>用<code class=\"language-text\">Provider</code>包起来，这样<code class=\"language-text\">Provider</code>下的所有组件都可以通过<code class=\"language-text\">connect</code>来获取<code class=\"language-text\">store</code>上存储的数据了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./demos/reactReduxDemo/counter'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> counterStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./demos/reactReduxDemo/configStore'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counterStore<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>  <span class=\"token comment\">// 将store注入到Provider中</span>\n        <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，我们将<code class=\"language-text\">store</code>注入到组件中，当数据发生变化的时候，会通知<code class=\"language-text\">Provider</code>下的所有订阅了<code class=\"language-text\">store</code>的组件更新。</p>\n<p>在我们将<code class=\"language-text\">store</code>注入之后，其下的组件如果需要使用<code class=\"language-text\">store</code>中的数据，就需要使用<code class=\"language-text\">connect</code>这个<code class=\"language-text\">API</code>。\n<code class=\"language-text\">connect</code>其实就是一个高阶组件（传入一个组件，返回一个组件），这里<code class=\"language-text\">connect</code>的接口参数如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">,</span> mergeProps<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的<code class=\"language-text\">mapStateToProps</code>主要是用来从<code class=\"language-text\">store</code>中获取数据的函数，这里的函数接口如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上这里的<code class=\"language-text\">state</code>就是<code class=\"language-text\">store</code>，在<code class=\"language-text\">mapStateProps</code>中我们可以拿到整个应用的数据，在<code class=\"language-text\">mapStateToProps</code>中可以拿到我们需要的数据，另外一个参数<code class=\"language-text\">ownProps</code>是父组件传给子组件的<code class=\"language-text\">props</code>。\n另外一个函数<code class=\"language-text\">mapDispatchToProps</code>，这里的函数的参数接口如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上这里的<code class=\"language-text\">dispatch</code>就是<code class=\"language-text\">redux</code>中的<code class=\"language-text\">dispatch</code>，当我们需要改变<code class=\"language-text\">state</code>的时候，就需要<code class=\"language-text\">dispatch action</code>，在<code class=\"language-text\">connect</code>中如果没有传入<code class=\"language-text\">mapDispatchToProps</code>的话，会将<code class=\"language-text\">dispatch</code>作为<code class=\"language-text\">props</code>传入组件；<code class=\"language-text\">mapDispatchToProps</code>的函数的返回值是一个<code class=\"language-text\">object</code>，函数的<code class=\"language-text\">value</code>就是一个<code class=\"language-text\">action creator</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tfoo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">myAcion</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，这里的<code class=\"language-text\">foo</code>在组件中可以通过<code class=\"language-text\">props</code>访问到，这里最好将组件中的<code class=\"language-text\">action creator</code>放在<code class=\"language-text\">mapDispatchToProps</code>中，不要暴露<code class=\"language-text\">dispatch</code>到组件中，避免将<code class=\"language-text\">redux</code>暴露给组件中，这样组件对<code class=\"language-text\">redux</code>是无感的，组件的复用性更高。\n如下，如果一个组件需要从<code class=\"language-text\">store</code>上获取数据，使用<code class=\"language-text\">connect</code>将组件包起来：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n\t\tmapState<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\tmergeProps<span class=\"token punctuation\">,</span>\n\t\toptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上的方式使用<code class=\"language-text\">connect</code>，<code class=\"language-text\">MyComponent</code>中的<code class=\"language-text\">props</code>就可以拿到<code class=\"language-text\">dispatch</code>。\n就像上面说的，并不推荐直接将<code class=\"language-text\">dispatch</code>直接传给组件，将<code class=\"language-text\">action creator</code>包装成一个函数传给组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tincrement<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'\tINCREASE'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tdecrement<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'DESCREASE'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ConnectAdvanced</code>是<code class=\"language-text\">react-redux</code>提供的最后一个<code class=\"language-text\">API</code>，这个<code class=\"language-text\">API</code>是5.0之后提供的，这个方法主要是提供定制化的<code class=\"language-text\">connect</code>，由开发者自己实现缓存和<code class=\"language-text\">props check</code>，<code class=\"language-text\">connect</code>内部就是使用<code class=\"language-text\">connectAdvanced</code>实现，它也是一个高阶组件，其函数接口如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">,</span> connectOptions<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上，其中的<code class=\"language-text\">selectorFactory</code>就是产生<code class=\"language-text\">mapStateToProps + mapDispatchToProps</code>的工厂函数，起接口及其作用如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nextFinalProps</code></pre></div>\n<p>我们会在<code class=\"language-text\">(dispatch, options) =&gt; {}</code>这一层将我们的<code class=\"language-text\">action creator</code>函数以及最终传给组件的<code class=\"language-text\">props</code>对象创建好，在第二层闭包<code class=\"language-text\">nextState, nextOwnProps</code>中会在<code class=\"language-text\">redux state</code>刷新的时候拿到最新的<code class=\"language-text\">state</code>和<code class=\"language-text\">props</code>，在这一层会做缓存的命中，如果最新的<code class=\"language-text\">props</code>中变更的数据影响当前组件，会更新在第一层闭包中缓存好的最终需要传给组件的<code class=\"language-text\">props</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> actionCreators <span class=\"token keyword\">from</span> <span class=\"token string\">'./actionCreators'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bindActionCreators <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectorFactory</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> ownProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> text <span class=\"token operator\">=></span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span>ownProps<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">[</span>nextOwnProps<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> nextResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>nextOwnProps<span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">,</span> addTodo <span class=\"token punctuation\">}</span>\n    ownProps <span class=\"token operator\">=</span> nextOwnProps\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> nextResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> nextResult\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TodoApp<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"如何使用React—Redux","date":"January 19, 2019","lang":null}}},{"node":{"id":"936bbb6a-8522-56f3-92be-62626f1a7dc8","excerpt":"TL;DR; 本质上是一个高阶组件 会对组件做缓存控制 使用 做全局状态的通信 Overview 如上，react-redux向外暴露了四个API，分别是 、 、 、 。 Provider…","html":"<hr>\n<p>TL;DR;</p>\n<ul>\n<li><code class=\"language-text\">Connect</code>本质上是一个高阶组件</li>\n<li><code class=\"language-text\">Connect</code>会对组件做缓存控制</li>\n<li><code class=\"language-text\">Connect</code>使用<code class=\"language-text\">Context</code>做全局状态的通信</li>\n</ul>\n<hr>\n<h2 id=\"overview\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Provider <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Provider'</span>\n<span class=\"token keyword\">import</span> connectAdvanced <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/connectAdvanced'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReactReduxContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Context'</span>\n<span class=\"token keyword\">import</span> connect <span class=\"token keyword\">from</span> <span class=\"token string\">'./connect/connect'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> Provider<span class=\"token punctuation\">,</span> connectAdvanced<span class=\"token punctuation\">,</span> ReactReduxContext<span class=\"token punctuation\">,</span> connect <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，react-redux向外暴露了四个API，分别是<code class=\"language-text\">Provider</code>、<code class=\"language-text\">ConnectAdvanced</code>、<code class=\"language-text\">ReactReduxContext</code>、<code class=\"language-text\">connect</code>。</p>\n<h2 id=\"provider\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provider</h2>\n<p><code class=\"language-text\">Provider</code>是一个<code class=\"language-text\">React Component</code>，在组件<code class=\"language-text\">didMount</code>的时候订阅<code class=\"language-text\">redux</code>的<code class=\"language-text\">store</code>，在<code class=\"language-text\">willUnMount</code>的时候接触订阅，每次<code class=\"language-text\">redux state</code>改变的时候，会调用<code class=\"language-text\">Provider</code>中的<code class=\"language-text\">setState</code>，使得组件刷新，我们来看看部分源代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      store\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>在组件初始化的时候，<code class=\"language-text\">Provider</code>从<code class=\"language-text\">props</code>上获取<code class=\"language-text\">redux</code>上的<code class=\"language-text\">store</code>，并初始化<code class=\"language-text\">state</code>。</p>\n<p>同时在组件<code class=\"language-text\">didMount</code>的时候，这里会向<code class=\"language-text\">redux</code>的<code class=\"language-text\">store</code>上注册<code class=\"language-text\">callback</code>函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newStoreState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>providerState <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the value is the same, skip the unnecessary state update.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>providerState<span class=\"token punctuation\">.</span>storeState <span class=\"token operator\">===</span> newStoreState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> newStoreState <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Actions might have been dispatched between render and mount - handle those</span>\n    <span class=\"token keyword\">const</span> postMountStoreState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postMountStoreState <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> postMountStoreState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里在<code class=\"language-text\">subscribe</code>函数的最后几行的代码，是用来处理在组件<code class=\"language-text\">Provider</code>如果在初次<code class=\"language-text\">render</code>的时候，如果有<code class=\"language-text\">action</code>被<code class=\"language-text\">dispatch</code>，这个时候还没有<code class=\"language-text\">subscribe</code>，但是这时候我们的数据需要刷新，所以这个时候需要去取一次最新数据，如果发现有数据变化，使用<code class=\"language-text\">setState</code>，触发组件刷新。</p>\n<p>在<code class=\"language-text\">render</code>中使用<code class=\"language-text\">Context.Provider</code>将<code class=\"language-text\">context</code>中的内容，即我们这里的<code class=\"language-text\">state</code>注入到<code class=\"language-text\">children</code>组件中。</p>\n<p>从上面的代码可以看到，如果<code class=\"language-text\">redux</code>的<code class=\"language-text\">State</code>发生了变化，会触发顶层组件的刷新，重新<code class=\"language-text\">render</code>，从而重刷整个应用。</p>\n<h2 id=\"connect\"><a href=\"#connect\" aria-label=\"connect permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connect</h2>\n<p><code class=\"language-text\">connect</code>这个函数就是我们经常要使用到的，一般来说在使用<code class=\"language-text\">redux</code>的时候，<code class=\"language-text\">Container</code>组件就是一个<code class=\"language-text\">connect</code>之后的组件。\n<code class=\"language-text\">connect</code>主要的工作就是一是负责从<code class=\"language-text\">state tree</code>上去取组件要用的数据，另外就是在<code class=\"language-text\">state</code>变化的时候，重新计算来自<code class=\"language-text\">state</code>上的<code class=\"language-text\">props</code>。\n我们来看看一个简单版本的<code class=\"language-text\">connect</code>的实现（<a href=\"https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e\">connect explain</a>）:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// connect() is a function that injects Redux-related props into your component.</span>\n<span class=\"token comment\">// You can inject data and callbacks that change that data by dispatching actions.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// It lets us inject component as the last step so people can use it as a decorator.</span>\n  <span class=\"token comment\">// Generally you don't need to worry about it.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// It returns a component</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token comment\">// that renders your component</span>\n          <span class=\"token operator\">&lt;</span>WrappedComponent\n            <span class=\"token punctuation\">{</span><span class=\"token comment\">/* with its props  */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token comment\">/* and additional props calculated from Redux store */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// it remembers to subscribe to the store so it doesn't miss updates</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// and unsubscribe later</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    \n      <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// and whenever the store state changes, it re-renders.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上就是<code class=\"language-text\">connect</code>一个简单版本的实现，<code class=\"language-text\">connect</code>是一个包装过的高阶组件的函数，在第一层接受一个<code class=\"language-text\">selector</code>函数，接收<code class=\"language-text\">redux</code>的<code class=\"language-text\">state</code>和传给组件的<code class=\"language-text\">props</code>， 然后将需要包装的组件传给返回后的函数，最后返回的组件中就可以从<code class=\"language-text\">props</code>上拿到<code class=\"language-text\">redux state</code>上的数据了，上面这个是一个简陋的<code class=\"language-text\">connect</code>实现，我们来看看<code class=\"language-text\">react redux</code>真正的实现。</p>\n<p>我们先来看看<code class=\"language-text\">connect</code>是如何解析我们传入的参数的，<code class=\"language-text\">connect</code>的<code class=\"language-text\">map*</code>传入的格式支持直接传入函数，也可以传入一个<code class=\"language-text\">obejct</code>，来看看<code class=\"language-text\">react-redux</code>是如何支持不同的输入的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// createConnect with default args builds the 'official' connect behavior. Calling it with</span>\n<span class=\"token comment\">// different options opens up some testing and extensibility scenarios</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  connectHOC <span class=\"token operator\">=</span> connectAdvanced<span class=\"token punctuation\">,</span>\n  mapStateToPropsFactories <span class=\"token operator\">=</span> defaultMapStateToPropsFactories<span class=\"token punctuation\">,</span>\n  mapDispatchToPropsFactories <span class=\"token operator\">=</span> defaultMapDispatchToPropsFactories<span class=\"token punctuation\">,</span>\n  mergePropsFactories <span class=\"token operator\">=</span> defaultMergePropsFactories<span class=\"token punctuation\">,</span>\n  selectorFactory <span class=\"token operator\">=</span> defaultSelectorFactory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上，是<code class=\"language-text\">connect.js</code>文件暴露出来的<code class=\"language-text\">connect</code>接口，外面用的时候，是使用的<code class=\"language-text\">createConnect</code>的返回值。\n在这里<code class=\"language-text\">createConnect</code>使用了默认参数，分别是：</p>\n<ul>\n<li><code class=\"language-text\">connectAdvanced</code></li>\n<li><code class=\"language-text\">defaultMapStateToPropsFactories</code></li>\n<li><code class=\"language-text\">defaultMapDispatchToPropsFactories</code></li>\n<li>defaultMergePropsFactories</li>\n<li>defaultSelectorFactory</li>\n</ul>\n<p>我们这里先看和<code class=\"language-text\">props</code>相关的<code class=\"language-text\">defaultMapStateToPropsFactories</code>和<code class=\"language-text\">defaultMapDispatchToPropsFactories</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initMapStateToProps <span class=\"token operator\">=</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>\n      mapStateToProps<span class=\"token punctuation\">,</span>\n      mapStateToPropsFactories<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'mapStateToProps'</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> initMapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>\n      mapDispatchToProps<span class=\"token punctuation\">,</span>\n      mapDispatchToPropsFactories<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'mapDispatchToProps'</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>当调用<code class=\"language-text\">connect</code>的时候，这里会调用<code class=\"language-text\">match</code>函数，来辨别出我们传入的<code class=\"language-text\">mapStateToProps</code>和<code class=\"language-text\">mapDispatchToProps</code>是函数还是<code class=\"language-text\">object</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> factories<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> factories<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> factories<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`Invalid value of type </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> arg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> argument when connecting component </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        options<span class=\"token punctuation\">.</span>wrappedComponentName\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.`</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面就是<code class=\"language-text\">match</code>函数的代码，这里会将我们传入的<code class=\"language-text\">map*</code>函数作为参数，传入给<code class=\"language-text\">mapDispatchToPropsFactories</code>这个工厂函数，我们来这个工厂函数的实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> wrapMapToPropsConstant<span class=\"token punctuation\">,</span> wrapMapToPropsFunc <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./wrapMapToProps'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapStateToPropsIsFunction</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> mapStateToProps <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'mapStateToProps'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapStateToPropsIsMissing</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>mapStateToProps <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>whenMapStateToPropsIsFunction<span class=\"token punctuation\">,</span> whenMapStateToPropsIsMissing<span class=\"token punctuation\">]</span></code></pre></div>\n<p>如上是<code class=\"language-text\">mapStateToPropsFactories</code>的实现，这里<code class=\"language-text\">export</code>出去的是一个<code class=\"language-text\">array</code>，分别是当<code class=\"language-text\">mapStateToProps</code>是函数和没有传入的时候，最后返回的是<code class=\"language-text\">wrapMapToPropsFunc</code>这个函数包装后的函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapToProps<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initProxySelector</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> displayName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里<code class=\"language-text\">wrapMapToPropsFuc</code>，返回值是一个<code class=\"language-text\">(dispatch, { displayName}) =&gt; {}</code>的接口，这里就是工厂函数生成的函数的接口，这个函数也是被<code class=\"language-text\">mapDispatchToProps</code>复用的，生成统一的接口函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bindActionCreators <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> wrapMapToPropsConstant<span class=\"token punctuation\">,</span> wrapMapToPropsFunc <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./wrapMapToProps'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapDispatchToPropsIsFunction</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> mapDispatchToProps <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">,</span> <span class=\"token string\">'mapDispatchToProps'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapDispatchToPropsIsMissing</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>mapDispatchToProps\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsConstant</span><span class=\"token punctuation\">(</span>dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whenMapDispatchToPropsIsObject</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> mapDispatchToProps <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> mapDispatchToProps <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">wrapMapToPropsConstant</span><span class=\"token punctuation\">(</span>dispatch <span class=\"token operator\">=></span>\n        <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  whenMapDispatchToPropsIsFunction<span class=\"token punctuation\">,</span>\n  whenMapDispatchToPropsIsMissing<span class=\"token punctuation\">,</span>\n  whenMapDispatchToPropsIsObject\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>如上是<code class=\"language-text\">mapDispatchToProps</code>的代码，<code class=\"language-text\">mapDisptchToProps</code>支持函数、<code class=\"language-text\">Object</code>、或者不传任何参数，和<code class=\"language-text\">mapStateToProps</code>一样最后也是返回<code class=\"language-text\">(dispatch, { options }) =&gt; {}</code>。在将<code class=\"language-text\">map*</code>函数初始化好之后，后面就是调用一个高阶组件函数，用来接收我们想要从<code class=\"language-text\">redux</code>上获取数据的组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">return</span> <span class=\"token function\">connectHOC</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// used in error messages</span>\n      methodName<span class=\"token punctuation\">:</span> <span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// used to compute Connect's displayName from the wrapped component's displayName.</span>\n      getDisplayName<span class=\"token punctuation\">:</span> name <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Connect(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes</span>\n      shouldHandleStateChanges<span class=\"token punctuation\">:</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// passed through to selectorFactory</span>\n      initMapStateToProps<span class=\"token punctuation\">,</span>\n      initMapDispatchToProps<span class=\"token punctuation\">,</span>\n      initMergeProps<span class=\"token punctuation\">,</span>\n      pure<span class=\"token punctuation\">,</span>\n      areStatesEqual<span class=\"token punctuation\">,</span>\n      areOwnPropsEqual<span class=\"token punctuation\">,</span>\n      areStatePropsEqual<span class=\"token punctuation\">,</span>\n      areMergedPropsEqual<span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// any extra options args can override defaults of connect or connectAdvanced</span>\n      <span class=\"token operator\">...</span>extraOptions\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的代码就是<code class=\"language-text\">connect(map1, map2)</code>的返回值，这里调用了<code class=\"language-text\">connectHOC(connectAdvanced)</code>，我们来看看<code class=\"language-text\">connectAdvanced</code>函数的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectorFactory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token comment\">/* options object*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapWithConnect</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码是<code class=\"language-text\">connectAdvanced</code>函数的接口和返回值，这里接受<code class=\"language-text\">selectorFactory</code>和<code class=\"language-text\">options</code>设置，这里的<code class=\"language-text\">selectorFactory</code>函数就是将我们在上一步调用初始化好的<code class=\"language-text\">map*</code>函数由<code class=\"language-text\">(dispatch, { options }) =&gt; {}</code>的形式转换为<code class=\"language-text\">(stateOrDispatch, ownProps) =&gt; {}</code>的形式。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">finalPropsSelectorFactory</span><span class=\"token punctuation\">(</span>\n  dispatch<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> initMapStateToProps<span class=\"token punctuation\">,</span> initMapDispatchToProps<span class=\"token punctuation\">,</span> initMergeProps<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>options <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mapStateToProps <span class=\"token operator\">=</span> <span class=\"token function\">initMapStateToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token function\">initMapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> mergeProps <span class=\"token operator\">=</span> <span class=\"token function\">initMergeProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">verifySubselectors</span><span class=\"token punctuation\">(</span>\n      mapStateToProps<span class=\"token punctuation\">,</span>\n      mapDispatchToProps<span class=\"token punctuation\">,</span>\n      mergeProps<span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">.</span>displayName\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> selectorFactory <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>pure\n    <span class=\"token operator\">?</span> pureFinalPropsSelectorFactory\n    <span class=\"token punctuation\">:</span> impureFinalPropsSelectorFactory\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">selectorFactory</span><span class=\"token punctuation\">(</span>\n    mapStateToProps<span class=\"token punctuation\">,</span>\n    mapDispatchToProps<span class=\"token punctuation\">,</span>\n    mergeProps<span class=\"token punctuation\">,</span>\n    dispatch<span class=\"token punctuation\">,</span>\n    options\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码就是<code class=\"language-text\">selectorFactory</code>函数的实现，这里首先调用了由<code class=\"language-text\">map</code>工厂函数生成的函数，返回的函数就是由<code class=\"language-text\">wrapMapToPropsFunc</code>返回的函数，这里我们来看看<code class=\"language-text\">wrapMapToPropsFunc</code>的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapMapToPropsFunc</span><span class=\"token punctuation\">(</span>mapToProps<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initProxySelector</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> displayName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">proxy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapToPropsProxy</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps\n        <span class=\"token operator\">?</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">mapToProps</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">mapToProps</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// allow detectFactoryAndVerify to get ownProps</span>\n    proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    proxy<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">mapToProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">detectFactoryAndVerify</span><span class=\"token punctuation\">(</span>\n      stateOrDispatch<span class=\"token punctuation\">,</span>\n      ownProps\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      proxy<span class=\"token punctuation\">.</span>mapToProps <span class=\"token operator\">=</span> mapToProps\n      proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps <span class=\"token operator\">=</span> <span class=\"token function\">getDependsOnOwnProps</span><span class=\"token punctuation\">(</span>mapToProps<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> props <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        proxy<span class=\"token punctuation\">.</span>mapToProps <span class=\"token operator\">=</span> props\n        proxy<span class=\"token punctuation\">.</span>dependsOnOwnProps <span class=\"token operator\">=</span> <span class=\"token function\">getDependsOnOwnProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n        props <span class=\"token operator\">=</span> <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>stateOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">verifyPlainObject</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> displayName<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> props\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> proxy\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的<code class=\"language-text\">wrapMapToPropsFunc</code>最终返回的是一个<code class=\"language-text\">proxy</code>函数，这个函数的接口是<code class=\"language-text\">(dispatchOrState, ownProps) =&gt; {}</code>，这也我们的<code class=\"language-text\">map*</code>函数的接口相同，这里<code class=\"language-text\">proxy</code>函数主要是处理在第一次运行的时候，如果我们提供的<code class=\"language-text\">map*</code>函数的返回值是<code class=\"language-text\">map</code>函数这种情况，另外就是检测最后我们提供的<code class=\"language-text\">map*</code>函数的返回值是一个<code class=\"language-text\">plain object</code>的情况。</p>\n<p>在拿到真正的<code class=\"language-text\">map*</code>函数后，会判断传入的<code class=\"language-text\">options</code>中<code class=\"language-text\">pure</code>的值来决定使用哪一个<code class=\"language-text\">SelectorFactory</code>函数，默认情况下会使用<code class=\"language-text\">pureFinalPropsSelectorFactory</code>，如果<code class=\"language-text\">pure</code>为<code class=\"language-text\">false</code>的话会使用<code class=\"language-text\">impureFinalPropsSelectorFactory</code>，前一个函数缓存了前一次的<code class=\"language-text\">state</code>，<code class=\"language-text\">ownProps</code>，<code class=\"language-text\">stateProps</code>，<code class=\"language-text\">dispatchProps</code>，<code class=\"language-text\">mergedProps</code>，在第一次调用<code class=\"language-text\">connect</code>的时候，会设置好缓存，在后续的调用中会比较缓存，如果缓存的引用没变，就不会调用<code class=\"language-text\">map*</code>函数生成新的<code class=\"language-text\">props</code>。具体的实现代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pureFinalPropsSelectorFactory</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps<span class=\"token punctuation\">,</span>\n  mergeProps<span class=\"token punctuation\">,</span>\n  dispatch<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> areStatesEqual<span class=\"token punctuation\">,</span> areOwnPropsEqual<span class=\"token punctuation\">,</span> areStatePropsEqual <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hasRunAtLeastOnce <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">let</span> state\n  <span class=\"token keyword\">let</span> ownProps\n  <span class=\"token keyword\">let</span> stateProps\n  <span class=\"token keyword\">let</span> dispatchProps\n  <span class=\"token keyword\">let</span> mergedProps\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleFirstCall</span><span class=\"token punctuation\">(</span>firstState<span class=\"token punctuation\">,</span> firstOwnProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> firstState\n    ownProps <span class=\"token operator\">=</span> firstOwnProps\n    stateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    dispatchProps <span class=\"token operator\">=</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    hasRunAtLeastOnce <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleNewPropsAndNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">.</span>dependsOnOwnProps<span class=\"token punctuation\">)</span>\n      dispatchProps <span class=\"token operator\">=</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleNewProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">.</span>dependsOnOwnProps<span class=\"token punctuation\">)</span>\n      stateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapDispatchToProps<span class=\"token punctuation\">.</span>dependsOnOwnProps<span class=\"token punctuation\">)</span>\n      dispatchProps <span class=\"token operator\">=</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nextStateProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> statePropsChanged <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">areStatePropsEqual</span><span class=\"token punctuation\">(</span>nextStateProps<span class=\"token punctuation\">,</span> stateProps<span class=\"token punctuation\">)</span>\n    stateProps <span class=\"token operator\">=</span> nextStateProps\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statePropsChanged<span class=\"token punctuation\">)</span>\n      mergedProps <span class=\"token operator\">=</span> <span class=\"token function\">mergeProps</span><span class=\"token punctuation\">(</span>stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubsequentCalls</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> propsChanged <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">areOwnPropsEqual</span><span class=\"token punctuation\">(</span>nextOwnProps<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> stateChanged <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">areStatesEqual</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n    state <span class=\"token operator\">=</span> nextState\n    ownProps <span class=\"token operator\">=</span> nextOwnProps\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propsChanged <span class=\"token operator\">&amp;&amp;</span> stateChanged<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleNewPropsAndNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propsChanged<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleNewProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateChanged<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleNewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mergedProps\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pureFinalPropsSelector</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> hasRunAtLeastOnce\n      <span class=\"token operator\">?</span> <span class=\"token function\">handleSubsequentCalls</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token function\">handleFirstCall</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> nextOwnProps<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上是<code class=\"language-text\">pureFinalPropsSelectorFactory</code>的实现，这里在第一次调用的时候产生一份缓存，后续的调用会检查缓存。</p>\n<p>上面的一连串过程就是<code class=\"language-text\">props</code>如何产生，以及<code class=\"language-text\">props</code>的刷新过程。简要的来说，这里的几个不同的<code class=\"language-text\">factory</code>函数，主要的工作是统一接口，校验传进来的参数，函数接口的转换形式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>mapOrDispatch<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> finalProps</code></pre></div>\n<p>上面就是这几个<code class=\"language-text\">factory</code>函数的主要工作。</p>\n<p>我们继续来看<code class=\"language-text\">connect</code>后续的代码的主要工作是返回一个高阶组件来包装我们的组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">connectAdvanced</span><span class=\"token punctuation\">(</span>selectoryFactory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token comment\">/*options object*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">withConnect</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里对这个高阶组件做了几个小的处理，一是对于<code class=\"language-text\">forwardRef</code>的处理，而是对<code class=\"language-text\">Context</code>的处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forwardRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> forwarded <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">forwardConnectRef</span><span class=\"token punctuation\">(</span>\n        props<span class=\"token punctuation\">,</span>\n        ref\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Connect wrapperProps<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">}</span> forwardedRef<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      forwarded<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> displayName\n      forwarded<span class=\"token punctuation\">.</span>WrappedComponent <span class=\"token operator\">=</span> WrappedComponent\n      <span class=\"token keyword\">return</span> <span class=\"token function\">hoistStatics</span><span class=\"token punctuation\">(</span>forwarded<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，如果<code class=\"language-text\">forwardRef</code>为<code class=\"language-text\">true</code>的时候，这个时候，会讲<code class=\"language-text\">ref</code>挂到<code class=\"language-text\">connect</code>包的底层组件上；另外就是对<code class=\"language-text\">context</code>的处理了</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> ContextToUse <span class=\"token operator\">=</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">isContextConsumer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context\n            <span class=\"token punctuation\">:</span> Context\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>indirectRenderWrappedComponent<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">connect</code>的第三个参数支持注入我们自己的<code class=\"language-text\">context</code>，如上的代码，如果我们在<code class=\"language-text\">mergeProps</code>中注入了我们自己的<code class=\"language-text\">context</code>，会优先使用我们自己的<code class=\"language-text\">context</code>，否则就使用<code class=\"language-text\">Provider</code>上提供的<code class=\"language-text\">context</code>。在之前讲的到，<code class=\"language-text\">selectorFactory</code>会讲<code class=\"language-text\">wrapMapToProps</code>包装后的函数<code class=\"language-text\">(dispatch, options) =&gt; {}</code> 转换为<code class=\"language-text\">(stateOrDispatch, ownProps) =&gt; {}</code>。在代码里的体现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> ContextToUse <span class=\"token operator\">=</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">isContextConsumer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>context\n            <span class=\"token punctuation\">:</span> Context\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>indirectRenderWrappedComponent<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ContextToUse<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\t</code></pre></div>\n<p>在<code class=\"language-text\">connect</code>的<code class=\"language-text\">render</code>方法中，调用了<code class=\"language-text\">this.indirectRenderWrappedComponent</code>，这个方法实际上就是<code class=\"language-text\">makeDerivedPropsSelector</code>返回的函数，我们来看看这个方法的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">makeDerivedPropsSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> lastProps\n      <span class=\"token keyword\">let</span> lastState\n      <span class=\"token keyword\">let</span> lastDerivedProps\n      <span class=\"token keyword\">let</span> lastStore\n      <span class=\"token keyword\">let</span> lastSelectorFactoryOptions\n      <span class=\"token keyword\">let</span> sourceSelector\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectDerivedProps</span><span class=\"token punctuation\">(</span>\n        state<span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">,</span>\n        store<span class=\"token punctuation\">,</span>\n        selectorFactoryOptions\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pure <span class=\"token operator\">&amp;&amp;</span> lastProps <span class=\"token operator\">===</span> props <span class=\"token operator\">&amp;&amp;</span> lastState <span class=\"token operator\">===</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> lastDerivedProps\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          store <span class=\"token operator\">!==</span> lastStore <span class=\"token operator\">||</span>\n          lastSelectorFactoryOptions <span class=\"token operator\">!==</span> selectorFactoryOptions\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          lastStore <span class=\"token operator\">=</span> store\n          lastSelectorFactoryOptions <span class=\"token operator\">=</span> selectorFactoryOptions\n          sourceSelector <span class=\"token operator\">=</span> <span class=\"token function\">selectorFactory</span><span class=\"token punctuation\">(</span>\n            store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">,</span>\n            selectorFactoryOptions\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        lastProps <span class=\"token operator\">=</span> props\n        lastState <span class=\"token operator\">=</span> state\n\n        <span class=\"token keyword\">const</span> nextProps <span class=\"token operator\">=</span> <span class=\"token function\">sourceSelector</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>\n\n        lastDerivedProps <span class=\"token operator\">=</span> nextProps\n        <span class=\"token keyword\">return</span> lastDerivedProps\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到在第一次运行，更换<code class=\"language-text\">store</code>或更换<code class=\"language-text\">selectorFactoryOptions</code>\u0010的时候，会重新获取<code class=\"language-text\">store</code>和<code class=\"language-text\">selectorFactoryOptions</code>，这块函数就是每次<code class=\"language-text\">context</code>刷新或者<code class=\"language-text\">props change</code>的时候，调用当前的<code class=\"language-text\">map*</code>函数，生成新的<code class=\"language-text\">props</code>或者是使用旧的<code class=\"language-text\">props</code>。最后调用<code class=\"language-text\">makeChildElementSelector</code>将计算好的props，要渲染的组件，以及要转发的<code class=\"language-text\">ref</code>传进去，可以看到这里的刷新也是有一层缓存的，如果传入的这些东西还是上一次的话，这里还是会返回上一次渲染的组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">function</span> <span class=\"token function\">makeChildElementSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> lastChildProps<span class=\"token punctuation\">,</span> lastForwardRef<span class=\"token punctuation\">,</span> lastChildElement<span class=\"token punctuation\">,</span> lastComponent\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectChildElement</span><span class=\"token punctuation\">(</span>\n        WrappedComponent<span class=\"token punctuation\">,</span>\n        childProps<span class=\"token punctuation\">,</span>\n        forwardRef\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          childProps <span class=\"token operator\">!==</span> lastChildProps <span class=\"token operator\">||</span>\n          forwardRef <span class=\"token operator\">!==</span> lastForwardRef <span class=\"token operator\">||</span>\n          lastComponent <span class=\"token operator\">!==</span> WrappedComponent\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          lastChildProps <span class=\"token operator\">=</span> childProps\n          lastForwardRef <span class=\"token operator\">=</span> forwardRef\n          lastComponent <span class=\"token operator\">=</span> WrappedComponent\n          lastChildElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>childProps<span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>forwardRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> lastChildElement\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>在没有转发<code class=\"language-text\">ref</code>的情况下，<code class=\"language-text\">connect</code>组件会返回：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">return</span> <span class=\"token function\">hoistStatics</span><span class=\"token punctuation\">(</span>Connect<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的<code class=\"language-text\">hoistStatics</code>函数是为了将<code class=\"language-text\">WrapperComponent</code>上的静态属性复制到<code class=\"language-text\">Connect</code>的组件上；原因在于，如果原始的组件上有一个静态方法，在<code class=\"language-text\">connect</code>之后的组件暴露出去用的时候，这个组件实际上是访问不到的，所以要把一些静态属性拷到高阶组件上去。</p>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"React-Redux源码剖析","date":"January 26, 2019","lang":null}}},{"node":{"id":"52c2e583-0851-5583-9cb9-3f8014dc60b2","excerpt":"TL:DR; 前端模块化主要是解决依赖管理，模块加载的问题 立即调用函数的匿名闭包是模块化实现的基石 在客户端和服务端都需要做模块化 CommonJS是服务端的模块化解决方案，模块同步加载 AMD是客户端（浏览器）的模块化方案，模块异步加载 UMD统一了客户端和服务端，兼容AMD和CommonJS ES…","html":"<hr>\n<p>TL:DR;</p>\n<ul>\n<li>前端模块化主要是解决依赖管理，模块加载的问题</li>\n<li>立即调用函数的匿名闭包是模块化实现的基石</li>\n<li>在客户端和服务端都需要做模块化</li>\n<li>CommonJS是服务端的模块化解决方案，模块同步加载</li>\n<li>AMD是客户端（浏览器）的模块化方案，模块异步加载</li>\n<li>UMD统一了客户端和服务端，兼容AMD和CommonJS</li>\n<li>ES6提供了官方的模块化（import/export）</li>\n</ul>\n<hr>\n<p> 在写<code class=\"language-text\">Javascript</code>的时候，会经常会听到模块化这个概念，模块化在编程是一个很重要的设计，将可复用的、独立的模块抽出来，一是避免重复造轮子；二是减小维护和使用成本，虽然现在<code class=\"language-text\">ES6</code>提供了标准的模块化方案，但是在<code class=\"language-text\">Javascript</code>的发展历程中还是经历了一段从黑暗到光明的阶段。</p>\n<h2 id=\"模块的加载和封装\"><a href=\"#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%B0%81%E8%A3%85\" aria-label=\"模块的加载和封装 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模块的加载和封装</h2>\n<p>使用<code class=\"language-text\">&lt;script&gt;</code>来做模块化最常见的方式是使用<code class=\"language-text\">script</code>标签将你需要的模块在网页中加载，在用户请求网页的时候，会加载前置的依赖，例如这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./module1.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>就像上面一样，这里先加载<code class=\"language-text\">module1.js</code>，在<code class=\"language-text\">main.js</code>中会使用<code class=\"language-text\">module1</code>暴露出的方法，但是这样的模块化方案如果面对大量的依赖管理的话，就会面临很多问题，就像下面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./framework.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./frameworkPlugin.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./frameworkPlugin1.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./frameworkPlugin2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./frameworkPlugin3.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      ...\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>但是如果依赖多了的话，带来的问题就是，第一依赖模糊，模块与模块之间的依赖并不清楚；第二就是会给代码维护带来麻烦，因为在编写代码的时候，依赖的注入，是依赖于<code class=\"language-text\">html</code>中前置的<code class=\"language-text\">script</code>标签做的，在代码中并没有显示的声明依赖；第三就是每个<code class=\"language-text\">&lt;script&gt;</code>加载都需要发网络请求，这里网络请求过多。</p>\n<p>如何构建<code class=\"language-text\">Javascript</code>模块也是一个值得探讨的问题，常见的是这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果以为上面的方式暴露接口的话，存在的问题就是，很容易污染全局环境，造成命名冲突，为了解决命名冲突的问题，随之而来，我们可以增加命名空间：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tfoo<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tbar<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmyModule<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>像上面这样加命名空间的方式减少了全局环境被污染的情况，并且这样的封装并不安全，本质上是对象，外部可以访问到不想暴露给外界的东西，这种方式并没有解决根本矛盾—>保证封装性的同时减少全局变量的数量，在这里我们要保证模块只暴露想暴露的东西，一些私有属性外界无法访问，这里使用闭包就可以解决这些问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> _private <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// use _private</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tfoo<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyModule<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyModule<span class=\"token punctuation\">.</span>_private</code></pre></div>\n<p>这里使用立即调用（IIFE）的模式，将私有属性和外部隔离起来，保证了封装性，如果我们需要注入其他的依赖可以这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> _$ <span class=\"token operator\">=</span> $<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> _private <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tfoo<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span></code></pre></div>\n<p>就像上面的代码，如果可以向模块引入外部依赖，这就是现代模块系统的基石。</p>\n<p>上面讲了如何封装一个模块和加载模块，在实际的开发过程中，我们仍然需要考虑几个问题，比如跳出浏览器环境，在<code class=\"language-text\">Node.js</code>下如何做模块化，如何对打包之后的模块进行压缩、合并、优化。</p>\n<h2 id=\"commonjs\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS</h2>\n<p><code class=\"language-text\">CommonJS</code>是<code class=\"language-text\">Node.js</code>的模块化规范，<code class=\"language-text\">Common.js</code>对外暴露四个环境变量<code class=\"language-text\">module</code>、<code class=\"language-text\">exports</code>、<code class=\"language-text\">global</code>、<code class=\"language-text\">require</code>，<code class=\"language-text\">Common.js</code>以文件作为独立模块来管理，<code class=\"language-text\">Common.js</code>以同步的方式加载模块。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//  引入模块</span>\n<span class=\"token comment\">// a.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 导出模块</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tfoo<span class=\"token punctuation\">,</span>\n\tbar\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token comment\">// 声明依赖模块</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">reauire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因为在服务端，文件存在磁盘上，读取速度很快，同步的加载方式不存在问题，但是在浏览器上，因为网络的原因，同步加载的方式并不是一个好的方式，这就引入了异步加载模块的方式<code class=\"language-text\">AMD</code>。</p>\n<p>优缺点：</p>\n<ul>\n<li>服务端的模块化方案实现</li>\n<li>模块的输出是<code class=\"language-text\">Object</code>，无法做静态分析</li>\n<li>每个模块输出都是一个<code class=\"language-text\">copy</code>，无法做到热加载</li>\n<li>循环依赖的管理做的不好</li>\n</ul>\n<h2 id=\"amd（async-module-definition-）\"><a href=\"#amd%EF%BC%88async-module-definition-%EF%BC%89\" aria-label=\"amd（async module definition ） permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AMD（Async Module Definition ）</h2>\n<p><code class=\"language-text\">AMD</code>规范制定了一套异步加载<code class=\"language-text\">module</code>的机制，<code class=\"language-text\">define(id?, dependencies?, factory)</code>，<code class=\"language-text\">define</code>函数的前两个参数是可选的，如果提供了一个<code class=\"language-text\">id</code>，这个<code class=\"language-text\">id</code>就代表该模块，如果没有给这个参数，某块的名字就是模块加载器请求脚本的名字，<code class=\"language-text\">dependencies</code>是一个模块<code class=\"language-text\">id</code>的数组，声明当前模块的依赖模块，<code class=\"language-text\">factory</code>函数就是在所有依赖模块加载好之后的会调函数，如果<code class=\"language-text\">dependencies</code>中没有提供任何依赖，模块加载器会扫描<code class=\"language-text\">factory</code>函数中所有的<code class=\"language-text\">require</code>，同步加载依赖,<code class=\"language-text\">factory</code>函数只执行一次，如果传入的参数是一个<code class=\"language-text\">Object</code>的话，会将模块输出到这个对象中，如果函数的返回值是一个对象，模块输出到返回值中。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 将alpha模块挂到exports上</span>\n  <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"require\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"exports\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"beta\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> beta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">verb</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span> beta<span class=\"token punctuation\">.</span><span class=\"token function\">verb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token comment\">//Or:</span>\n           <span class=\"token keyword\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beta\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">verb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回输出模块</span>\n   <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>alpha<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n         verb<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span> alpha<span class=\"token punctuation\">.</span><span class=\"token function\">verb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 一个没有依赖的模块</span>\n   <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     add<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用commonJS包裹的模块</span>\n   <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">action</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>优缺点：</p>\n<ul>\n<li>主要用于客户端（浏览器）</li>\n<li>语法复杂</li>\n</ul>\n<h2 id=\"umd（universal-module-definition）\"><a href=\"#umd%EF%BC%88universal-module-definition%EF%BC%89\" aria-label=\"umd（universal module definition） permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UMD（Universal Module Definition）</h2>\n<p><code class=\"language-text\">AMD</code>和<code class=\"language-text\">CommonJS</code>的模块化方案提供两套<code class=\"language-text\">API</code>，<code class=\"language-text\">UMD</code>将这两套<code class=\"language-text\">API</code>统一了起来，<code class=\"language-text\">UMD</code>使用<code class=\"language-text\">commonJS</code>的语法，但是提供异步加载模块的能力。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token comment\">// File log.js</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"exports\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      exports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    global<span class=\"token punctuation\">.</span>log <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example of UMD module system\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// expose log to other modules</span>\n  exports<span class=\"token punctuation\">.</span>log <span class=\"token operator\">=</span> log<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上其实<code class=\"language-text\">UMD</code>就是对宿主环境做了兼容性处理，在不同的宿主环境下输出不同模块。</p>\n<p>优缺点：\n- 同时适用于客户端和服务端，兼容性好\n- 兼容<code class=\"language-text\">AMD</code>和<code class=\"language-text\">CommonJS</code></p>\n<h2 id=\"es6的import和export\"><a href=\"#es6%E7%9A%84import%E5%92%8Cexport\" aria-label=\"es6的import和export permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6的Import和Export</h2>\n<p>在<code class=\"language-text\">ES6</code>中有了官方的模块化解决方案，将<code class=\"language-text\">AMD</code>、<code class=\"language-text\">CommonJS</code>和<code class=\"language-text\">UMD</code>统一了起来，并且在打包工具打包的时候可以做静态分析，可以做<code class=\"language-text\">tree shaking</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>优缺点：</p>\n<ul>\n<li>服务端和客户端都可以使用</li>\n<li><code class=\"language-text\">import</code>的时候拿到的是实际值不是拷贝，可以做热更新</li>\n<li>支持静态分析（可以用<code class=\"language-text\">tree shaking</code>）</li>\n<li>相比于<code class=\"language-text\">CommonJS</code>循环依赖的管理做的更好</li>\n</ul>\n<h2 id=\"webpack-、babel\"><a href=\"#webpack-%E3%80%81babel\" aria-label=\"webpack 、babel permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack 、Babel</h2>\n<p>因为并不是所有的宿主环境都支持<code class=\"language-text\">ES6</code>，我们需要使用<code class=\"language-text\">Babel</code>来将<code class=\"language-text\">ES6</code>的代码转移成<code class=\"language-text\">es5</code>的代码，同时我们需要对现有的工程代码做合并、压缩和优化，这主要是通过<code class=\"language-text\">Webpack</code>实现的，也可以使用<code class=\"language-text\">Webpack</code>做按需加载，划分不同的<code class=\"language-text\">chunk</code>，减少<code class=\"language-text\">http</code>请求。</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/creeperyang/blog/issues/17\">https://github.com/creeperyang/blog/issues/17</a></li>\n<li><a href=\"https://github.com/Huxpro/js-module-7day\">https://github.com/Huxpro/js-module-7day</a></li>\n<li><a href=\"https://medium.freecodecamp.org/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e\">https://medium.freecodecamp.org/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"Javascript模块化","date":"February 06, 2019","lang":null}}},{"node":{"id":"78de45a1-ce5f-541a-8294-e8a9d251e545","excerpt":"在ES6之前， 并没有官方标准的模块化方案，在社区中就出现了 和 这两种方案，前者主要用于服务端，后者用在浏览器端，为了统一写法，又出现了 的标准，在 中， 终于有了官方标准的模块化方案，这篇博客我们就来看看 的模块化方案。 Overview…","html":"<p>在ES6之前，<code class=\"language-text\">Javascript</code>并没有官方标准的模块化方案，在社区中就出现了<code class=\"language-text\">Common.js</code>和<code class=\"language-text\">AMD</code>这两种方案，前者主要用于服务端，后者用在浏览器端，为了统一写法，又出现了<code class=\"language-text\">UMD</code>的标准，在<code class=\"language-text\">ES6</code>中，<code class=\"language-text\">Javascript</code>终于有了官方标准的模块化方案，这篇博客我们就来看看<code class=\"language-text\">ES6</code>的模块化方案。</p>\n<h1 id=\"overview\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"定义和使用模块\"><a href=\"#%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97\" aria-label=\"定义和使用模块 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定义和使用模块</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js-----</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo in lib.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar in lib.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ------main.js-----</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> bar <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib.js'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，是<code class=\"language-text\">ES6</code>中<code class=\"language-text\">Module</code>的用法，这里有两个保留字<code class=\"language-text\">import</code>和<code class=\"language-text\">export</code>，从上面的代码中，我们可以发现，对于不同的<code class=\"language-text\">export</code>方式，对应的<code class=\"language-text\">import</code>的方式也不一样。</p>\n<h2 id=\"name-export\"><a href=\"#name-export\" aria-label=\"name export permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Name Export</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js-----</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，就是<code class=\"language-text\">name export</code>的写法，每一个函数或者变量，直接被<code class=\"language-text\">export</code>，这种每写一个函数或者变量就<code class=\"language-text\">export</code>的方式也叫做<code class=\"language-text\">inline export</code>，如果在一个<code class=\"language-text\">Module</code>中有很多需要<code class=\"language-text\">export</code>的东西，这种写法就有些累赘了，这时候可以写成这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js------</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">,</span>\n    bar<span class=\"token punctuation\">,</span>\n    a\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在<code class=\"language-text\">ES6 Module</code>中，有<code class=\"language-text\">local name</code>和<code class=\"language-text\">export name</code>的概念，顾名思义<code class=\"language-text\">local name</code>就是在<code class=\"language-text\">Module</code>中的名字，<code class=\"language-text\">export name</code>就是模块暴露给外界的名字。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js------</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// {A}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n    foo <span class=\"token keyword\">as</span> bar<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// {B}</span>\n    bar <span class=\"token keyword\">as</span> foo<span class=\"token punctuation\">,</span>\n    a <span class=\"token keyword\">as</span> b<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在上面的代码中，<code class=\"language-text\">{A}</code>行的<code class=\"language-text\">foo</code>是<code class=\"language-text\">local name</code>，在<code class=\"language-text\">{B}</code>行的<code class=\"language-text\">bar</code>是<code class=\"language-text\">export name</code>，同样的我们在<code class=\"language-text\">import</code>的时候也可以使用别名。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ------main.js------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo <span class=\"token keyword\">as</span> bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"default-export\"><a href=\"#default-export\" aria-label=\"default export permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Export</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ------main.js------</span>\n<span class=\"token keyword\">import</span> foo <span class=\"token keyword\">from</span> <span class=\"token string\">'lib.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，我们<code class=\"language-text\">import</code>了一个<code class=\"language-text\">default</code>的<code class=\"language-text\">export</code>，<code class=\"language-text\">default export</code>和<code class=\"language-text\">name export</code>在<code class=\"language-text\">import</code>的时候，<code class=\"language-text\">name export</code>需要加大括号，而<code class=\"language-text\">default export</code>则不需要。</p>\n<h2 id=\"转发export\"><a href=\"#%E8%BD%AC%E5%8F%91export\" aria-label=\"转发export permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>转发export</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js------</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo in lib.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar in lib.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">,</span>\n  a<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ------middleLib.js------</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token keyword\">as</span> bar<span class=\"token punctuation\">,</span> bar <span class=\"token keyword\">as</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ------main.js------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./middleLib'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上我们将模块<code class=\"language-text\">lib.js</code>中暴露的<code class=\"language-text\">export</code>通过另一个模块暴露出去了，这种常见的用法是，在封装好一个大的模块后，这个大的模块只需要向外界暴露部分小模块的<code class=\"language-text\">API</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">-</span> module\n  <span class=\"token operator\">--</span> a<span class=\"token punctuation\">.</span>js\n  <span class=\"token operator\">--</span> b<span class=\"token punctuation\">.</span>js\n  <span class=\"token operator\">--</span> index<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>如上，在<code class=\"language-text\">module</code>这个<code class=\"language-text\">folder</code>下我们有<code class=\"language-text\">a.js, b.js, index.js</code>，<code class=\"language-text\">a.js和b.js</code>是一些功能的实现，我们将<code class=\"language-text\">a.js, b.js</code>中需要向外界暴露的<code class=\"language-text\">API</code>通过<code class=\"language-text\">index.js</code>转发。</p>\n<h1 id=\"es6-module-under-hood\"><a href=\"#es6-module-under-hood\" aria-label=\"es6 module under hood permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6 Module Under Hood</h1>\n<p><code class=\"language-text\">ES6</code>给我们提供了很简洁的语法去使用模块，但是<code class=\"language-text\">ES Module</code>简洁的外表下，背后的细节仍然值得我们注意。</p>\n<h2 id=\"es-module是静态的\"><a href=\"#es-module%E6%98%AF%E9%9D%99%E6%80%81%E7%9A%84\" aria-label=\"es module是静态的 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Module是静态的</h2>\n<p>如何理解<code class=\"language-text\">ES Module</code>是静态的这句话呢？意思就是，<code class=\"language-text\">ES Module</code>不同于<code class=\"language-text\">Common.js</code>这种模块化方案，只有在运行时才可以确定依赖的模块，在源码中看到的依赖关系就是运行时的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//------commonJSModule.js------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n foo<span class=\"token punctuation\">,</span>\n bar<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//------main.js------</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./commonJSModule.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./commonJSModule.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，在<code class=\"language-text\">CommonJS</code>中这中动态的在运行时决定依赖的方式在<code class=\"language-text\">ES Module</code>中是行不通的（但是有提案在做运行时的<code class=\"language-text\">loader</code> —> <a href=\"https://github.com/whatwg/loader/%EF%BC%89%E3%80%82\">https://github.com/whatwg/loader/）。</a></p>\n<h2 id=\"es-module的变量提升\"><a href=\"#es-module%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87\" aria-label=\"es module的变量提升 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Module的变量提升</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js------</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo in lib.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar in lib.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">,</span>\n  a<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ------main.js------</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上，我们可以先调用<code class=\"language-text\">export</code>的函数，在调用之后再<code class=\"language-text\">import</code>，这个在编译的时候会将<code class=\"language-text\">import</code>提升到顶层，但是在实际开发的过程中，虽然可以这样，但是这并不是好的代码风格。</p>\n<h2 id=\"es-module是只读的\"><a href=\"#es-module%E6%98%AF%E5%8F%AA%E8%AF%BB%E7%9A%84\" aria-label=\"es module是只读的 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Module是只读的</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------commonJSModule.js------</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">,</span>\n    a<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ------main.js------</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>上面的代码在<code class=\"language-text\">CommonJS</code>下，我们可以修改<code class=\"language-text\">require</code>的东西，因为在<code class=\"language-text\">commonJS</code>中是拷贝一份，但是在<code class=\"language-text\">ES Module</code>中，我们无法修改<code class=\"language-text\">import</code>的东西，<code class=\"language-text\">import</code>的模块在行为上类似于<code class=\"language-text\">const</code>变量和<code class=\"language-text\">frozen object</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------lib.js------</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo in lib.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar in lib.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">,</span>\n  a<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ------main.js------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// works {A}</span>\n<span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error {B}</span></code></pre></div>\n<h2 id=\"es-module静态结构的设计带来的益处\"><a href=\"#es-module%E9%9D%99%E6%80%81%E7%BB%93%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9B%8A%E5%A4%84\" aria-label=\"es module静态结构的设计带来的益处 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Module静态结构的设计带来的益处</h2>\n<p><code class=\"language-text\">ES Module</code>的静态结构的设计特点，让代码在编译的时候就能确定依赖关系，不同于运行时，只有代码跑起来的时候很多东西才能确定，就好比，你计划完成一项复杂的项目，静态的结构能保证你在做之前，你确定的事是不会变的，而不是只要等到在项目进行中去确定，面对可预测的问题，我们是好解决的。</p>\n<ul>\n<li>有助于在代码打包的时候做 <code class=\"language-text\">dead code elimination</code>，减小<code class=\"language-text\">bundle</code>文件的大小（<code class=\"language-text\">RollUp</code>基于<code class=\"language-text\">ES Module</code>实现了<code class=\"language-text\">tree shaking</code>）</li>\n<li>静态的结构有助于<code class=\"language-text\">lint</code>工具的检测</li>\n<li>为<code class=\"language-text\">javascript</code>支持宏做准备（宏操作需要静态的结构 —> <a href=\"https://www.sweetjs.org/%EF%BC%89\">https://www.sweetjs.org/）</a></li>\n</ul>\n<h1 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\">ES6 Module</a></li>\n<li><a href=\"https://stackoverflow.com/questions/41706953/are-the-new-ecmascript-6-import-and-export-asynchronous\">Are the new ECMAScript 6 import and export asynchronous?</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"ES6 Module","date":"March 16, 2019","lang":null}}},{"node":{"id":"d073d1cf-dbae-585c-a0b6-3071dc500c32","excerpt":"在访问网页的时候，浏览器是如何渲染当前的页面的？浏览器获取到输入（ 、 、 ）的时候，输入中有 的信息，有样式信息， 代码，在加载页面的时候，如果 的加载和解析太耗时的话，首屏的大量留白是很影响用户体验的，这里我们来看看，对于 在页面中的加载对 的加载的性能影响。 Script…","html":"<p>在访问网页的时候，浏览器是如何渲染当前的页面的？浏览器获取到输入（<code class=\"language-text\">HTML</code>、<code class=\"language-text\">CSS</code>、<code class=\"language-text\">Javascript</code>）的时候，输入中有<code class=\"language-text\">DOM Tree</code>的信息，有样式信息，<code class=\"language-text\">Javascript</code>代码，在加载页面的时候，如果<code class=\"language-text\">DOM</code>的加载和解析太耗时的话，首屏的大量留白是很影响用户体验的，这里我们来看看，对于<code class=\"language-text\">Scritp</code>在页面中的加载对<code class=\"language-text\">HTML</code>的加载的性能影响。</p>\n<h2 id=\"script在页面中的位置\"><a href=\"#script%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE\" aria-label=\"script在页面中的位置 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Script在页面中的位置</h2>\n<p><code class=\"language-text\">script</code>标签在页面中放置的位置对于整个页面的加载和功能影响是很大，默认情况下，浏览器在解析<code class=\"language-text\">HTMl</code>页面的时候，遇到<code class=\"language-text\">script</code>标签，如果是<code class=\"language-text\">inline</code>的话，会立即执行<code class=\"language-text\">script</code>标签中的代码，这里就牵扯一个问题，浏览器对<code class=\"language-text\">HTML</code>的解析是按照<code class=\"language-text\">HTML</code>内容的输入顺序执行的，如果<code class=\"language-text\">script</code>在<code class=\"language-text\">head</code>中，如果需要操作<code class=\"language-text\">DOM</code>，这个时候浏览器对文档的解析并没有结束，可能这时候需要的<code class=\"language-text\">DOM</code>并不存在。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n      <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dom Length: '</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如上，是一个<code class=\"language-text\">inline</code>的<code class=\"language-text\">script</code>，在<code class=\"language-text\">script</code>的代码中去取<code class=\"language-text\">DOM</code>，这个时候浏览器在执行这段代码的时候，浏览器并没有解析到对应的<code class=\"language-text\">DOM</code>。</p>\n<p><img src=\"http://Soyn.github.io/img/inline_in_head.png\"></p>\n<p>所以，为了避免这种情况，一般来说，会将script标签放置在<code class=\"language-text\">&lt;/body&gt;</code>标签前，这个时候，所有的<code class=\"language-text\">DOM</code>都解析好了，不存在找不到<code class=\"language-text\">DOM</code>的情况。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n      <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dom Length: '</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>    \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"http://Soyn.github.io/img/inline_in_body.png\"></p>\n<h2 id=\"外部script的加载对html解析的影响\"><a href=\"#%E5%A4%96%E9%83%A8script%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AF%B9html%E8%A7%A3%E6%9E%90%E7%9A%84%E5%BD%B1%E5%93%8D\" aria-label=\"外部script的加载对html解析的影响 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>外部Script的加载对HTML解析的影响</h2>\n<p>在加载外部的<code class=\"language-text\">script</code>的时候，<code class=\"language-text\">script</code>的加载对于页面的性能影响更加明显，加载外部脚本的时候牵扯发外部的请求去请求脚本，这个时候<code class=\"language-text\">HTML</code>的解析是被阻塞住的，外部<code class=\"language-text\">script</code>加载成功后，马上执行<code class=\"language-text\">script</code>脚本，执行完后，才继续解析剩下的<code class=\"language-text\">HTML</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"http://Soyn.github.io/img/extend_script_in_body.png\">\n从上图的<code class=\"language-text\">profile</code>的图我们可以发现，浏览器在解析<code class=\"language-text\">HTML</code>的时候，默认在解析到<code class=\"language-text\">script</code>标签的时候，会加载对应的<code class=\"language-text\">Javascript</code>代码，加载完成后立即执行，这个过程会将<code class=\"language-text\">HTML</code>解析阻塞住，那有没有办法解决页面阻塞的问题呢？在<code class=\"language-text\">HTML5</code>中引入了<code class=\"language-text\">async</code>和<code class=\"language-text\">defer</code>这两个属性，可以解决<code class=\"language-text\">script</code>加载阻塞页面解析的问题。</p>\n<h2 id=\"script中的async和defer属性\"><a href=\"#script%E4%B8%AD%E7%9A%84async%E5%92%8Cdefer%E5%B1%9E%E6%80%A7\" aria-label=\"script中的async和defer属性 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Script中的Async和Defer属性</h2>\n<p>首先我们看看<code class=\"language-text\">MDN</code>对这两个属性的解释：\n<img src=\"http://Soyn.github.io/img/extend_async_mdn.png\">\n如上，是<code class=\"language-text\">async</code>属性对<code class=\"language-text\">script</code>标签的加载和执行的影响：</p>\n<ul>\n<li><code class=\"language-text\">async</code>为<code class=\"language-text\">true</code>的<code class=\"language-text\">script</code>是异步加载和执行的，加载过程不会阻塞浏览器对<code class=\"language-text\">HTML</code>的解析</li>\n<li>有多个<code class=\"language-text\">async</code>为<code class=\"language-text\">true</code>的<code class=\"language-text\">script</code>的执行的顺序是不确定的，执行顺序并不是脚本的引用顺序</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>true</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"http://Soyn.github.io/img/async_profile.png\">\n从上面的<code class=\"language-text\">profile</code>的图可以很明显的看到这个过程，<code class=\"language-text\">Javascript</code>的加载和<code class=\"language-text\">HTML</code>的解析是并行的，并不会阻塞<code class=\"language-text\">HTML</code>的<code class=\"language-text\">parse</code>，但是<code class=\"language-text\">javascript</code>代码的执行的实际这里是无法确定的。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Test5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>true</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>true</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如上，我们在这里从<code class=\"language-text\">cdn</code>上引入了<code class=\"language-text\">JQuery</code>的代码，我们来看看这里<code class=\"language-text\">async=true</code>的时候，对<code class=\"language-text\">javascript</code>代码的执行情况的影响。\n<img src=\"http://Soyn.github.io/img/async_jquery.png\">\n在上面的<code class=\"language-text\">profile</code>的图中，我们可以很明显的看到，<code class=\"language-text\">javascript</code>代码的执行顺序，和<code class=\"language-text\">script</code>的引入顺序并不一致。\n我们接着来看看<code class=\"language-text\">defer</code>属性对<code class=\"language-text\">script</code>标签的影响：\n<img src=\"http://Soyn.github.io/img/extend_defer_mdn.png\">\n根据<code class=\"language-text\">MDN</code>的解释，在<code class=\"language-text\">defer</code>属性为<code class=\"language-text\">true</code>的情况下，<code class=\"language-text\">script</code>标签会异步加载，脚本的执行是按照<code class=\"language-text\">script</code>标签在<code class=\"language-text\">HTML</code>中出现顺序执行，等所有的<code class=\"language-text\">script</code>执行完毕之后才会触发<code class=\"language-text\">DOMContentLoaded</code>事件。\n<img src=\"http://Soyn.github.io/img/defer_profile.png\">\n对于<code class=\"language-text\">script</code>的加载和执行，结合文中实际的例子，我们总结一下：</p>\n<ul>\n<li><code class=\"language-text\">script</code>标签默认是同步加载，加载完成之后立即执行</li>\n<li><code class=\"language-text\">async</code>为<code class=\"language-text\">true</code>的时候，<code class=\"language-text\">script</code>的加载是异步的（不会阻塞<code class=\"language-text\">HTML</code>的解析过程），代码的执行顺序不一定是<code class=\"language-text\">script</code>标签出现的顺序。</li>\n<li><code class=\"language-text\">defer</code>的加载和<code class=\"language-text\">async</code>是异步的不会阻塞<code class=\"language-text\">HTML</code>的<code class=\"language-text\">parse</code>，和<code class=\"language-text\">async</code>区别在于，<code class=\"language-text\">defer</code>标签的执行是按照在文档中定义的顺序执行的，在代码执行完毕之后才触发<code class=\"language-text\">DOMContentLoaded</code>，<code class=\"language-text\">async</code>的代码的执行并不对<code class=\"language-text\">DOMContentLoaded</code>有影响（代码的执行可能在<code class=\"language-text\">DOMContentLoaded</code>事件之后，意味着如果在<code class=\"language-text\">async</code>为<code class=\"language-text\">true</code>的脚本中拿不到<code class=\"language-text\">DOMContentLoaded</code>的事件)]</li>\n</ul>\n<h1 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://flaviocopes.com/javascript-async-defer/\">Efficiently load JavaScript with defer and async</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\">The Script element</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"script在HTML中的加载","date":"March 02, 2019","lang":null}}},{"node":{"id":"e12bf571-7ff2-5a46-b597-94426daa5035","excerpt":"在前端开发中，如何对前端状态的管理是一个需要面对的问题，前端主要是数据展示和界面交互， 交互的存在就会导致数据的变化，数据的变化会影响页面的展示 ，也就是说，一个完整的前端状态管理，要提供数据的存储、更新、数据变化的通知机制。这篇文章，我们来了解一下如何从0到…","html":"<p>在前端开发中，如何对前端状态的管理是一个需要面对的问题，前端主要是数据展示和界面交互，<strong><em>交互的存在就会导致数据的变化，数据的变化会影响页面的展示</em></strong>，也就是说，一个完整的前端状态管理，要提供数据的存储、更新、数据变化的通知机制。这篇文章，我们来了解一下如何从0到1，如何实现前端数据的管理。</p>\n<h2 id=\"发布订阅\"><a href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85\" aria-label=\"发布订阅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发布订阅</h2>\n<p>首先我们需要一个机制在数据更新的时候，用到这份数据的部分能够知道数据更新了，这样才能保证页面的同步；这里我们需要实现一个<a href=\"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\">Publish/Subscribe</a>，在数据更新的时候发布<code class=\"language-text\">stateChanged</code>的事件，所有订阅了<code class=\"language-text\">stateChange</code>的组件会调用注册的回调函数来获取更新后的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ------pubSub.js------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PubSub</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentEventListeners <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentEventListeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      currentEventListeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>listener <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callback is not a function!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，就是一个发布／订阅的简单实现，<code class=\"language-text\">listeners</code>中会维护所有注册的回调函数，在<code class=\"language-text\">subscribe</code>的时候会以事件名为<code class=\"language-text\">key</code>，回调函数为<code class=\"language-text\">value</code>，放入<code class=\"language-text\">listeners</code>中，<code class=\"language-text\">publish</code>事件的时候，会调用注册到当前这个事件所有的回调函数。<code class=\"language-text\">发布／订阅</code>模式是很常见的消息传递机制，好处是模块与模块之间解耦，订阅者和发布者对于彼此是透明的。</p>\n<h2 id=\"如何侦测数据变更\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BE%A6%E6%B5%8B%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4\" aria-label=\"如何侦测数据变更 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何侦测数据变更</h2>\n<p>有了发布／订阅之后，我们就需要知道数据变更的时机，这里我们使用<code class=\"language-text\">ES6</code>的<code class=\"language-text\">Proxy</code>来检测数据的变化。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// --- store.js---</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>state <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stateChanged'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> Status<span class=\"token punctuation\">.</span>Mutating<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You Should Mutate Your State By Action!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> Status<span class=\"token punctuation\">.</span>Resting<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，<code class=\"language-text\">store</code>中的<code class=\"language-text\">state</code>是一个<code class=\"language-text\">Proxy</code>，我们在<code class=\"language-text\">set</code>数据的时候，会发布<code class=\"language-text\">stateChanged</code>的事件，所有订阅了<code class=\"language-text\">stateChanged</code>的回调都会被调用。</p>\n<h2 id=\"如何变更数据\"><a href=\"#%E5%A6%82%E4%BD%95%E5%8F%98%E6%9B%B4%E6%95%B0%E6%8D%AE\" aria-label=\"如何变更数据 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何变更数据</h2>\n<p>类似于<code class=\"language-text\">redux</code>，我们需要设计一套去变更数据的模式，在创建<code class=\"language-text\">store</code>的时候，将我们对数据的加工操作（类似于<code class=\"language-text\">redux</code>的<code class=\"language-text\">reducer</code>注册进去），在需要修改数据的时候，<code class=\"language-text\">dispatch</code>对应的<code class=\"language-text\">action</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PubSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mutations'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// {A}</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mutations <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>mutations<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>mutationType<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> Status<span class=\"token punctuation\">.</span>Mutating<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mutations<span class=\"token punctuation\">[</span>mutationType<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mutations<span class=\"token punctuation\">[</span>mutationType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actionType<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Payload Must Be A Plain Object!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> Status<span class=\"token punctuation\">.</span>Mutating<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Can Not Dispatch Action In Mutation Function!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>actionType<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {B}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在创建<code class=\"language-text\">store</code>的时候，我们将修改<code class=\"language-text\">state</code>的操作<code class=\"language-text\">mutations</code>注入进去(<code class=\"language-text\">{A}</code>行代码)，在<code class=\"language-text\">dispatch</code>的时候，根据<code class=\"language-text\">dispatch</code>的<code class=\"language-text\">action</code>的类型去调用对应的<code class=\"language-text\">mutation</code>来更改<code class=\"language-text\">state</code>，<code class=\"language-text\">mutation</code>会触发<code class=\"language-text\">stateChanged</code>的事件，这样所有订阅了<code class=\"language-text\">stateChanged</code>事件的组件会刷新；所以我们可以提供一个基础组件，这个组件要做的事就是订阅<code class=\"language-text\">stateChanged</code>事件，事件发生之后就重新渲染：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>store <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stateChanged'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上，其他的组件从这个组件上继承的时候，就会自动订阅<code class=\"language-text\">stateChanged</code>的事件，完整的代码实现在这里：<a href=\"https://github.com/Soyn/tinyStateManager\">tinyStateManager</a></p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>\n<h2 id=\"build-a-state-management-system-with-vanilla-javascript\"><a href=\"#build-a-state-management-system-with-vanilla-javascript\" aria-label=\"build a state management system with vanilla javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://css-tricks.com/build-a-state-management-system-with-vanilla-javascript/\">Build a state management system with vanilla JavaScript</a></h2>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>\n</li>\n</ul>","frontmatter":{"title":"实现一个前端状态管理库","date":"March 23, 2019","lang":null}}},{"node":{"id":"12379993-7124-5a3b-a617-9814c1aa437d","excerpt":"什么是路由？ 路由最一开始是在后端中出现的，我们在访问某些网站的时候经常会见到类似于这样的 :\n  或者  ，这就是 （Server Side Render…","html":"<h2 id=\"什么是路由？\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%AF%E7%94%B1%EF%BC%9F\" aria-label=\"什么是路由？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是路由？</h2>\n<p>路由最一开始是在后端中出现的，我们在访问某些网站的时候经常会见到类似于这样的<code class=\"language-text\">url</code>:\n<code class=\"language-text\">http://www.xxx.com/xxx.php</code> 或者 <code class=\"language-text\">http://www.xxx.com/xxx.html</code>，这就是<code class=\"language-text\">SSR</code>（Server Side Render）服务端渲染，通过后端直接渲染前端页面。这里客户端会发向服务端发请求，服务端解析<code class=\"language-text\">url</code>，根据<code class=\"language-text\">url</code>将需要的资源返回给前端，路由其实就是前端和服务端的一种交互方式，相当于服务端针对于<code class=\"language-text\">不同url</code>的<code class=\"language-text\">switch case</code>，每一类<code class=\"language-text\">case</code>对应一个<code class=\"language-text\">controller</code>。</p>\n<h2 id=\"前端路由\"><a href=\"#%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1\" aria-label=\"前端路由 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端路由</h2>\n<p>上面介绍了传统意义上的路由，用户在页面上点击的时候触发页面请求，服务端将对应的页面返回回来，这样存在一个问题是，整个页面会重新加载，会产生无意义的白屏页面，用户体验不好。在用户点击访问网站或者<code class=\"language-text\">Web App</code>上的另一个页面的时候，这个时候我们可能仅仅需要的是更新部分视图就可以了，而没有必要去重新加载整个页面，避免无意义的白屏；这个时候前端路由就出现了，页面的跳转和渲染放在前端，后端提供<code class=\"language-text\">API</code>获取数据即可。</p>\n<h2 id=\"前端路由的实现原理\"><a href=\"#%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\" aria-label=\"前端路由的实现原理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端路由的实现原理</h2>\n<p>对于前端路由有两种实现方式，一种是通过<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event\"><code class=\"language-text\">hashchanged</code></a>；另一种是使用<code class=\"language-text\">HTML5</code>提供的<code class=\"language-text\">history api</code>来做前端路由的处理。\n对于<code class=\"language-text\">hasnchange</code>的实现方式，我们需要监听<code class=\"language-text\">hashchange</code>事件，在浏览器的<code class=\"language-text\">url</code>中改变<code class=\"language-text\">hash</code>不会导致页面发请求，我们在<code class=\"language-text\">hashchange</code>的事件回调中处理页面中<code class=\"language-text\">DOM</code>的刷新。\n<img src=\"http://Soyn.github.io/img/19-4-13-03.jpg\" alt=\"hashchange\">\n在<code class=\"language-text\">html5</code>推出<code class=\"language-text\">pushstate</code>和<code class=\"language-text\">replacestate</code>之后，就可以通过这两个<code class=\"language-text\">api</code>来改变<code class=\"language-text\">url</code>并且不发请求，而且相比于使用<code class=\"language-text\">hash</code>，页面的<code class=\"language-text\">url</code>更加美观，但是通过<code class=\"language-text\">pushstate</code>方式改变了<code class=\"language-text\">url</code>，如果这个时候刷新了页面，服务端会收到请求，这个时候后端没有对应的<code class=\"language-text\">controller</code>来处理，所以在<code class=\"language-text\">pushstate</code>的实现方式下，后端最好对于没有路由的<code class=\"language-text\">url</code>直接返回到主页面。</p>\n<h2 id=\"如何实现一个简单的前端路由\"><a href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1\" aria-label=\"如何实现一个简单的前端路由 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何实现一个简单的前端路由</h2>\n<p>这里我们来尝试实现一个简单的前端路由，主要的思想就是侦测<code class=\"language-text\">url</code>的变化，解析<code class=\"language-text\">url</code>，调用<code class=\"language-text\">handler</code>，整个路由是一个单例。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Route <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    config<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>root <span class=\"token operator\">||</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">'history'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> history<span class=\"token punctuation\">.</span>pushState <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> <span class=\"token string\">'hash'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基于浏览器的两种实现方式，我们实现路由的时候，提供<code class=\"language-text\">mode</code>的设置，默认是’hash’的实现，这里我们配置了根路径，这里主要是处理在<code class=\"language-text\">pushstate</code>的实现中，<code class=\"language-text\">pushstate</code>导致无法获取到<code class=\"language-text\">url</code>改变的部分的问题：\n<img src=\"http://Soyn.github.io/img/19-4-13-01.png\">\n<img src=\"http://Soyn.github.io/img/19-4-13-02.png\">\n如上图，我们原本的页面在<code class=\"language-text\">https://github.com</code>下，在第一次<code class=\"language-text\">pushstate</code>的时候，没有问题，但是在第二次<code class=\"language-text\">pushstate</code>的时候，和我们期待的<code class=\"language-text\">url</code>并不符合，这会导致的问题是，我们在解析<code class=\"language-text\">url change</code>的部分的时候，会得到错误的结果，所以这里我们指定好根目录，在解析的时候将<code class=\"language-text\">url</code>中根路径剔除掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  getFragement<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fragement <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fragement <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>pathname <span class=\"token operator\">+</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span>\n      fragement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearSlash</span><span class=\"token punctuation\">(</span>fragement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      fragement <span class=\"token operator\">=</span> fragement<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/\\?(.*)$/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// replace the query string</span>\n      fragement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">?</span> fragement<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> fragement<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      fragement <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> fragement<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码就是去解析出’url’改变的部分；在<code class=\"language-text\">pushstate</code>的实现中，存在一个问题是，我们在<code class=\"language-text\">url</code>跳转的时候，是调用<code class=\"language-text\">pushstate</code>来改变<code class=\"language-text\">url</code>，但是这并不能触发<code class=\"language-text\">popstate</code>的事件，所以这里我们需要去<code class=\"language-text\">listen url</code>的变化：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  startTimer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">internalFn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      self<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>internalFn<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>internalFn<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  listen<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFragement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">getFragement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">getFragement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>完整的代码实现请查看： <a href=\"https://github.com/Soyn/FERoute\">FERoute</a></p>\n<h2 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h2>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/53064386\">https://www.zhihu.com/question/53064386</a></li>\n<li><a href=\"https://juejin.im/post/5b40c1ede51d4518f140f84b\">https://juejin.im/post/5b40c1ede51d4518f140f84b</a></li>\n<li><a href=\"https://www.zhihu.com/question/63586494\">前端管理路由相比后端有什么优势？ - 知乎</a></li>\n<li><a href=\"http://krasimirtsonev.com/blog/article/deep-dive-into-client-side-routing-navigo-pushstate-hash\">http://krasimirtsonev.com/blog/article/deep-dive-into-client-side-routing-navigo-pushstate-hash</a></li>\n<li><a href=\"https://github.com/SME-FE/sme-router\">GitHub - SME-FE/sme-router: A lightweight router lib that implement with express route style</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\">https://developer.mozilla.org/en-US/docs/Web/API/History_API</a></li>\n<li><a href=\"https://github.com/krasimir/navigo\">GitHub - krasimir/navigo: A simple vanilla JavaScript router with a fallback for older browsers</a>\n<a href=\"https://medium.com/@wilbo/server-side-vs-client-side-routing-71d710e9227f\">Server-side vs Client-side Routing – Wilbert Schepenaar – Medium</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"前端路由","date":"April 13, 2019","lang":null}}},{"node":{"id":"e3176fe5-cf50-5512-9582-12424b1ca324","excerpt":"什么是Promise？ 英文翻译过来是诺言、承诺的意思 顾名思义， 的潜在含义是： 代表的是还没发生的事 在事情没有完成之前，无法确定是成功还是失败 而在 中的 代表的意义是类似的，对于异步操作（网络请求、文件I/O…","html":"<h1 id=\"什么是promise？\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFpromise%EF%BC%9F\" aria-label=\"什么是promise？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是Promise？</h1>\n<p><code class=\"language-text\">Promise</code>英文翻译过来是诺言、承诺的意思</p>\n<p><img src=\"http://Soyn.github.io/img/promise_0.png\"></p>\n<p>顾名思义，<code class=\"language-text\">Promise</code>的潜在含义是：</p>\n<ul>\n<li><code class=\"language-text\">promise</code>代表的是还没发生的事</li>\n<li>在事情没有完成之前，无法确定是成功还是失败</li>\n</ul>\n<p>而在<code class=\"language-text\">Javascript</code>中的<code class=\"language-text\">Promise</code>代表的意义是类似的，对于异步操作（网络请求、文件I/O等）这些事情在完成之前无法确定其状态，在完成的时候要么成功要么失败，<code class=\"language-text\">Promise</code>会在完成的时候通知你。</p>\n<p><img src=\"http://Soyn.github.io/img/promise_1.png\"></p>\n<p>上面是<code class=\"language-text\">Promise</code>的定义，<code class=\"language-text\">Promise</code>是一个表示异步事件处理完成的对象，我们看看传统的异步操作是怎样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Result is ready: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">failureCallback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error on async request: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">requestData</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> sucessCallback<span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在传统的异步操作下，整个接口的定义实现方式，没有一个清晰的定义，不同的人去写，接口的定义方式不一样。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Result is ready: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">failureCallback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error on async request: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">requestData</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>successCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>failureCallback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在<code class=\"language-text\">Promise</code>中，抽象出了异步操作成功（then）的接口和失败的接口（catch/reject），并且支持链式调用，在传统的<code class=\"language-text\">callback</code>的实现中，如果下一个异步操作依赖于上一个操作，很容易写出<code class=\"language-text\">callback hell</code>的这种代码，对于代码的阅读和维护带来麻烦。</p>\n<h1 id=\"promise的状态\"><a href=\"#promise%E7%9A%84%E7%8A%B6%E6%80%81\" aria-label=\"promise的状态 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise的状态</h1>\n<p><code class=\"language-text\">Promise</code>对象对象是一个代理对象，被代理的值表示一个异步操作，在创建的时候，对于最终异步操作的返回结果是未知的，<code class=\"language-text\">Promise</code>允许为异步操作的成功和失败分别绑定相应的处理方法，让异步方法可以像同步方法一样返回值，但并不是立即返回最终的执行结果，而是一个代理了未来出现的结果的<code class=\"language-text\">Promise</code>对象，<code class=\"language-text\">Promise</code>有以下几种状态：</p>\n<ul>\n<li><code class=\"language-text\">pending:</code>初始状态，创建<code class=\"language-text\">promise</code>之后，执行还没结束的时候</li>\n<li><code class=\"language-text\">fulfilled：</code>异步操作成功</li>\n<li><code class=\"language-text\">rejected:</code>异步操作失败</li>\n</ul>\n<p><img src=\"http://Soyn.github.io/img/promise_2.png\"></p>\n<p>如上图，在<code class=\"language-text\">promise</code>创建后，所处的状态为<code class=\"language-text\">pending</code>状态，执行成功或失败的这个过程叫<code class=\"language-text\">settled</code>，<code class=\"language-text\">settled</code>之后，<code class=\"language-text\">promise</code>由<code class=\"language-text\">pending</code>状态转换到<code class=\"language-text\">fulfilled</code>或<code class=\"language-text\">rejected</code>状态，并执行相应的回调。</p>\n<h1 id=\"how-to-use-promise\"><a href=\"#how-to-use-promise\" aria-label=\"how to use promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use Promise?</h1>\n<p>我们首先来看看<code class=\"language-text\">Promise</code>提供的方法：</p>\n<h2 id=\"constructor\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructor</h2>\n<p>常见的方式是通过<code class=\"language-text\">Promise</code>的构造函数得到Promise的实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">asyncWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上<code class=\"language-text\">Promise</code>的构造函数接收一个<code class=\"language-text\">executor</code>函数为参数，这个<code class=\"language-text\">executor</code>一般来说是一个异步操作，在生成实例的时候会被执行，在执行成功的时候调用<code class=\"language-text\">resolve</code>，失败的时候调用<code class=\"language-text\">reject</code>。</p>\n<h2 id=\"实例方法\"><a href=\"#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\" aria-label=\"实例方法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实例方法</h2>\n<ul>\n<li><code class=\"language-text\">Promise.prototype.then(onFulfilled?, onRejected?)</code>，在<code class=\"language-text\">promise resolve</code>的时候<code class=\"language-text\">onFulfilled</code>会被调用，<code class=\"language-text\">reject</code>的时候<code class=\"language-text\">onReject</code>会被调用，这两个参数是可选的，如果你只想对异常进行处理的话，可以使用<code class=\"language-text\">promise.then(undefined, onRejected)</code></li>\n<li><code class=\"language-text\">Promise.prototype.catch(onRejected)</code>，<code class=\"language-text\">catch</code>方法会在<code class=\"language-text\">promise reject</code>的时候被调用。</li>\n<li><code class=\"language-text\">Promise.prototype.finally(onFinally)</code>，向当前<code class=\"language-text\">promise</code>添加一个回调函数，无论当前<code class=\"language-text\">promise</code>的状态是完成还是失败都会被调用</li>\n</ul>\n<h2 id=\"静态方法\"><a href=\"#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\" aria-label=\"静态方法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>静态方法</h2>\n<ul>\n<li><code class=\"language-text\">Promise.resolve(value)</code>，返回一个由给定<code class=\"language-text\">value</code>决定的<code class=\"language-text\">promise</code>对象；如果这个<code class=\"language-text\">value</code>可以是一个<code class=\"language-text\">thenable</code>的对象（带有<code class=\"language-text\">then</code>方法的对象），最终返回的<code class=\"language-text\">promise</code>对象的状态由<code class=\"language-text\">then</code>方法执行决定；否则的话，返回的<code class=\"language-text\">promise</code>对象状态为<code class=\"language-text\">fulfilled</code>，并且将该值传给对应的<code class=\"language-text\">then</code>方法，如果你不知道一个值是否是<code class=\"language-text\">Promise</code>对象，使用<code class=\"language-text\">Promise.resolve(value)</code>来返回一个<code class=\"language-text\">Promise</code>对象，这样就能将该<code class=\"language-text\">value</code>以<code class=\"language-text\">Promise</code>对象的形式使用。</li>\n<li><code class=\"language-text\">Promise.reject(reason)</code>，返回一个执行状态为<code class=\"language-text\">rejected</code>的<code class=\"language-text\">Promise</code>对象，并将错误信息给到对应的处理函数</li>\n<li><code class=\"language-text\">Promise.race(iterable)</code>，当<code class=\"language-text\">iterable</code>中的任意一个子<code class=\"language-text\">promise</code>成功或者失败后，父<code class=\"language-text\">promise</code>会使用这个子<code class=\"language-text\">promise</code>的结果，传给父<code class=\"language-text\">promise</code>绑定的回调上</li>\n<li><code class=\"language-text\">Promise.all(iterable)</code>，这个方法返回一个<code class=\"language-text\">promise</code>对象，只有<code class=\"language-text\">iterable</code>中所有的<code class=\"language-text\">promise</code>执行成功的时候才会触发成功，一旦由任何一个执行失败都会触发要返回这个<code class=\"language-text\">promise</code>额失败，最终<code class=\"language-text\">iterable</code>的返回结果和<code class=\"language-text\">iterable</code>的顺序一致。</li>\n</ul>\n<p><code class=\"language-text\">promise</code>是支持链式调用的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      then<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"promise的错误处理\"><a href=\"#promise%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\" aria-label=\"promise的错误处理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise的错误处理</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\">// use `catch`</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Init'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {A}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// {B}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error was caught!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// use reject</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Init'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error was caught!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">promise</code>在处理错误的时候，可以通过<code class=\"language-text\">Promise.ptototype.catch</code>或者是注册的<code class=\"language-text\">reject</code>方法来处理错误，在<code class=\"language-text\">{A}</code>行处，抛出了错误，这里<code class=\"language-text\">promise</code>的状态会变为<code class=\"language-text\">rejected</code>，会调用对应的回调函数，在<code class=\"language-text\">{A}</code>到<code class=\"language-text\">.catch</code>之间的<code class=\"language-text\">promise</code>链会被打断。</p>\n<h1 id=\"wraaper-by-promise\"><a href=\"#wraaper-by-promise\" aria-label=\"wraaper by promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wraaper by Promise</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们在使用<code class=\"language-text\">setTimeout</code>的时候，<code class=\"language-text\">setTimeout</code>执行的函数如果执行发生了错误，并且在函数的实现中并没有做<code class=\"language-text\">Error Handling</code>，函数执行发生错误的时机我们并不知道，如果使用上面基于<code class=\"language-text\">promise</code>包裹之后的<code class=\"language-text\">timeout</code>，我们是可以明确知道错误发生的时机的。</p>\n<h2 id=\"超时promise\"><a href=\"#%E8%B6%85%E6%97%B6promise\" aria-label=\"超时promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>超时Promise</h2>\n<p><code class=\"language-text\">promise</code>创建之后，会等待异步操作的执行，如果异步操作的时间很长的话，这个<code class=\"language-text\">promise</code>一直处于  <code class=\"language-text\">pending</code>状态，对于用户来说，页面会一直停留在<code class=\"language-text\">loading</code>的状态，显然，用户体验并不好，因此，对于这种情况，我们需要提供可以在超时之后，取消<code class=\"language-text\">promsie</code>的机制：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">delayPromise</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Operation is timeout!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> timeoutPromise <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>asyncFn<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>asyncFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">delayPromise</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上我们基于<code class=\"language-text\">Promise.race</code>实现了超时<code class=\"language-text\">promise</code>。</p>\n<h2 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h2>\n<ul>\n<li><a href=\"http://liubin.org/promises-book/\">Promise迷你书</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"Promise初探","date":"April 20, 2019","lang":null}}},{"node":{"id":"e5484c2a-6e8f-5d83-bb5b-05b062a45f7e","excerpt":"什么是同源策略 \n上面是 对同源策略的定义，简单来说同源策略就是限制不同的源（ ）之间的交互的安全策略。想象如果没有同源策略的限制，你访问银行的网站A时的登录信息，在你访问另一个网站B的时候，B网站可以拿到A网站的信息，如果B…","html":"<h1 id=\"什么是同源策略\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\" aria-label=\"什么是同源策略 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是同源策略</h1>\n<p><img src=\"http://Soyn.github.io/img/wiki.png\">\n上面是<code class=\"language-text\">Wikipedia</code>对同源策略的定义，简单来说同源策略就是限制不同的源（<code class=\"language-text\">Domain</code>）之间的交互的安全策略。想象如果没有同源策略的限制，你访问银行的网站A时的登录信息，在你访问另一个网站B的时候，B网站可以拿到A网站的信息，如果B网站有恶意的代码，就可以直接访问你的银行账户。\n同源策略中的同源，是三个相同：</p>\n<ul>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口号相同</li>\n</ul>\n<p>以<code class=\"language-text\">http://www.example.com</code>为例：</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Outcome</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.example1.com\">http://www.example1.com</a></td>\n<td>Failure</td>\n<td>域名不同</td>\n</tr>\n<tr>\n<td><a href=\"http://www.example.com:8080\">http://www.example.com:8080</a></td>\n<td>Failure</td>\n<td>端口号不同</td>\n</tr>\n<tr>\n<td><a href=\"http://www.example.com/dir/page.html\">http://www.example.com/dir/page.html</a></td>\n<td>Same Origin</td>\n<td>仅仅是path不同</td>\n</tr>\n<tr>\n<td><a href=\"https://www.example1.com\">https://www.example1.com</a></td>\n<td>Failure</td>\n<td>协议不同</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"同源策略限制的范围\"><a href=\"#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%99%90%E5%88%B6%E7%9A%84%E8%8C%83%E5%9B%B4\" aria-label=\"同源策略限制的范围 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同源策略限制的范围</h1>\n<p>同源策略对跨源访问的控制可以分为三类；</p>\n<ul>\n<li>对跨域资源的<code class=\"language-text\">写操作</code>是可以，例如表单提交、重定向这些不受同源策略的限制</li>\n<li>一些替换元素（img、audio、video等）不受同源策略的限制</li>\n<li>不同源之间的资源读操作（获取cookie、localStorage、DOM、AJAX请求等）受到同源策略的限制</li>\n</ul>\n<p>对于开发人员来说，第三条限制，跨域资源之间的读取受到限制，这个是最常遇见的问题，对于第二条中一些HTML原生标签不受跨域访问的限制，可以用来<code class=\"language-text\">hack</code>掉同源策略的限制，以下资源是不受同源策略限制的：</p>\n<ul>\n<li><code class=\"language-text\">&lt;script&gt;标签</code></li>\n<li><code class=\"language-text\">外部CSS的加载&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code></li>\n<li><code class=\"language-text\">&lt;Img&gt;标签</code></li>\n<li><code class=\"language-text\">&lt;video&gt;和&lt;audio&gt;标签</code></li>\n<li><code class=\"language-text\">&lt;object&gt;、&lt;embed&gt;（&lt;applet&gt;也不受同源策略限制，但该标签已经被废弃）</code></li>\n<li><code class=\"language-text\">@font-face引用的字体（浏览器实现有差异，有些要同源）</code></li>\n<li><code class=\"language-text\">&lt;iframe&gt;中嵌入的内容</code></li>\n</ul>\n<h1 id=\"如何突破同源策略的限制\"><a href=\"#%E5%A6%82%E4%BD%95%E7%AA%81%E7%A0%B4%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E9%99%90%E5%88%B6\" aria-label=\"如何突破同源策略的限制 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何突破同源策略的限制</h1>\n<h2 id=\"change-origin\"><a href=\"#change-origin\" aria-label=\"change origin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Change Origin</h2>\n<p>在网页上可以通过设置<code class=\"language-text\">document.domain</code>设置当前页面所在的域，例如，在页面<code class=\"language-text\">http://store.company.com/dir/page.html</code>中的<code class=\"language-text\">JS</code>脚本执行了下面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> <span class=\"token string\">\"company.com\"</span>；</code></pre></div>\n<p>那么在当前网站上去获取<code class=\"language-text\">http://www.company.com</code>的网站上的资源是不受同源策略的限制的，但是这个改变<code class=\"language-text\">domain</code>的方法仅仅用于二级域名获取一级域名的资源的时候，你不能在<code class=\"language-text\">http://www.company.com</code>的<code class=\"language-text\">domain</code>改变为<code class=\"language-text\">otherCompany.com</code>。</p>\n<h1 id=\"iframe\"><a href=\"#iframe\" aria-label=\"iframe permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iframe</h1>\n<p><code class=\"language-text\">iframe</code>在的父子窗口如果不是同源的话，在访问获取彼此的DOM节点或者读取数据的话，会受到同源策略的限制，无法访问。\n<img src=\"http://Soyn.github.io/img/iframe.png\">\n父窗口所在的域为<code class=\"language-text\">http://localhost:5500</code>，其中子窗口所在的域为<code class=\"language-text\">http://localhost:8080</code>，这里父子窗口是同源的，所以彼此在获取资源的时候，会受到同源策略的限制：\n<img src=\"http://Soyn.github.io/img/parent.png\">\n<img src=\"http://Soyn.github.io/img/child.png\">\n对于<code class=\"language-text\">iframe</code>额跨域问题，有三种解决办法：</p>\n<ul>\n<li>使用<code class=\"language-text\">fragement</code>（hash tag）</li>\n<li>windows.name</li>\n<li>\n<p>postMessage</p>\n<h2 id=\"fragement\"><a href=\"#fragement\" aria-label=\"fragement permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragement</h2>\n<p>这里的<code class=\"language-text\">fragement</code>指的是<code class=\"language-text\">url</code>中<code class=\"language-text\">#</code>后面的部分，在父窗口中把信息作为<code class=\"language-text\">hash</code>写入到子窗口的src上。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalSrc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFrame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> originalSrc <span class=\"token operator\">+</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFrame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因为<code class=\"language-text\">url hash</code>的改变不会引起页面的刷新，但是会触发<code class=\"language-text\">onhashchange</code>的事件，在子窗口中监听<code class=\"language-text\">onhashchange</code>的事件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>onhashchange <span class=\"token operator\">=</span> getData</code></pre></div>\n<p>同样，子窗口也可以通过同样的方式，向父窗口传递数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">parent<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>parentUrl <span class=\"token operator\">+</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"code-classlanguage-textwindownamecode\"><a href=\"#code-classlanguage-textwindownamecode\" aria-label=\"code classlanguage textwindownamecode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">window.name</code></h2>\n<p><code class=\"language-text\">window.name</code>在页面进行跳转前设置的值，在跳转后也可以访问到，我们可以借助<code class=\"language-text\">window.name</code>的这个特性来解决跨域问题，整个流程如下：</p>\n</li>\n<li>在父窗口设置子<code class=\"language-text\">iframe</code>的<code class=\"language-text\">src</code>，在子窗口<code class=\"language-text\">load</code>成功后将<code class=\"language-text\">data</code>挂到<code class=\"language-text\">window.name</code>上，然后设置子窗口的<code class=\"language-text\">location.href</code>到与父窗口同域的页面</li>\n<li>\n<p>跳转到同域的页面后，父窗口就可以通过<code class=\"language-text\">window.name</code>拿到跨域页面设置的数据了\n例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html  <span class=\"token comment\">// {A}</span>\nb<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html  <span class=\"token comment\">// {B}</span>\na<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>empty<span class=\"token punctuation\">.</span>html  <span class=\"token comment\">// {C}</span></code></pre></div>\n<p>我们在<code class=\"language-text\">A</code>中加载完成后，在<code class=\"language-text\">A</code>页面中设置<code class=\"language-text\">src</code>为<code class=\"language-text\">B</code>页面的<code class=\"language-text\">url</code>，在<code class=\"language-text\">iframe</code>加载成功后，将数据设置到<code class=\"language-text\">window.name</code>上，然后改变自己的<code class=\"language-text\">location.href</code>为<code class=\"language-text\">C</code>页面，<code class=\"language-text\">C</code>页面加载成功后，<code class=\"language-text\">A</code>页面和<code class=\"language-text\">B</code>页面就是同源的了，这个时候<code class=\"language-text\">A</code>页面去子窗口上取<code class=\"language-text\">window.name</code>的值就不会因为跨域问题而报错了。 <strong>使用window.name的关键是在设置完window.name后，要将页面跳转到与父窗口同源的页面，这样主窗口才能访问子窗口上设置的数据</strong></p>\n<h2 id=\"windowpostmessag\"><a href=\"#windowpostmessag\" aria-label=\"windowpostmessag permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>window.postMessag</h2>\n<p><code class=\"language-text\">html5</code>提供了<code class=\"language-text\">postMessage</code>的机制，用于不同源之间的通信：</p>\n</li>\n</ul>\n<p><img src=\"http://Soyn.github.io/img/postMessage.png\" alt=\"postMessage MDN\"></p>\n<p><img src=\"http://Soyn.github.io/img/pm0.png\">\n在父窗口中监听<code class=\"language-text\">message</code>事件\n<img src=\"http://Soyn.github.io/img/pm1.png\">\n<code class=\"language-text\">iframe</code>窗口和父窗口不是同源的，通过<code class=\"language-text\">postMessage</code>将消息发送给父窗口。</p>\n<h2 id=\"jsonp\"><a href=\"#jsonp\" aria-label=\"jsonp permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSONP</h2>\n<p>在浏览器中，<code class=\"language-text\">script</code>标签是可以从不同源的地址上加载而不受同源策略的限制，这就给我们提供了一种手段，绕过同源策略的限制，<code class=\"language-text\">JSONP</code>就是通过这种手段来达到跨域通信的，但是<code class=\"language-text\">JSONP</code>需要服务端的支持，将返回的<code class=\"language-text\">JSON</code>数据和<code class=\"language-text\">url</code>中的<code class=\"language-text\">callback</code>拼接起来，只要前端定义了这个函数，在浏览器看来，就是从服务端加载了一段带数据的函数调用。\n<img src=\"http://Soyn.github.io/img/JSONP0.png\">\n<img src=\"http://Soyn.github.io/img/JSONP1.png\"></p>\n<h2 id=\"cors\"><a href=\"#cors\" aria-label=\"cors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS</h2>\n<p><code class=\"language-text\">CORS(cross-origin resource share)</code>规范了跨域请求的标准，通过<code class=\"language-text\">HTTP</code>头让浏览器允许跨域请求的发送，这个话题，我会在下一篇博客细讲。</p>\n<h2 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h2>\n<ul>\n<li><a href=\"https://medium.com/@baphemot/understanding-cors-18ad6b478e2b\">Understanding CORS – Bartosz Szczeciński – Medium</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">浏览器同源政策及其规避方法</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">CORS</a></li>\n<li><a href=\"https://github.com/MuYunyun/blog/issues/13\">跨域实践二三事</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS MDN</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"浏览器同源策略","date":"May 11, 2019","lang":null}}},{"node":{"id":"67e14683-7363-53fa-af2e-3abefed4860c","excerpt":"…","html":"<p>在前端的学习中，经常会听到双向绑定（<code class=\"language-text\">MVVM</code>）这个概念，双向绑定的概念很简单，就是视图（<code class=\"language-text\">View</code>）上的更新能够实时更新数据层（<code class=\"language-text\">Model</code>），同时数据层的更新也会实时更新到视图层。不同于<code class=\"language-text\">MVC</code>的数据单向流动（从数据层到视图层），那么如何实现数据和视图的双向绑定呢？\n实现数据的双向绑定，首先我们要搞明白面临的问题：</p>\n<ul>\n<li>如何监听试图层的变化？</li>\n<li>视图层变化之后如何更新到数据层？</li>\n<li>如何监听数据层的变化？</li>\n<li>如何将数据层的变化更新到视图层？</li>\n</ul>\n<p>视图层的更新主要是来自用户的输入行为（输入、点击等），我们可以通过监听事件的方式（<code class=\"language-text\">keyup</code>、<code class=\"language-text\">keydown</code>等），在事件回调中获取视图层的更新，将更新同步到数据层上，由于数据层的更新，我们再用数据去刷视图层，这样就是实现了双向绑定，从网上获取的资料来看，主要有以下几种实现方式：</p>\n<h1 id=\"手动绑定\"><a href=\"#%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A\" aria-label=\"手动绑定 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>手动绑定</h1>\n<p>这里手动绑定的意思是，在<code class=\"language-text\">DOM</code>上绑定事件回调，在事件回调函数值中去更新数据层和重新渲染视图，简单的实现如下：\n<img src=\"http://Soyn.github.io/img/handSetHTML.png\" alt=\"HandSetHtml\">\n如上，我们在<code class=\"language-text\">HTML</code>中有一个<code class=\"language-text\">input</code>元素用来输入，另一个<code class=\"language-text\">div</code>元素用来显示输入的元素；在这两个元素上我们声明了特定的属性<code class=\"language-text\">q-value</code>和<code class=\"language-text\">q-text</code>，这两个属性名标示着和数据层的绑定关系，如下，是相关的JS代码：\n<img src=\"http://Soyn.github.io/img/handSetJs.png\" alt=\"handset\">\n这里我们实现双向绑定的思路是，视图层对数据的绑定是通过特定的属性<code class=\"language-text\">q-*</code>，来将<code class=\"language-text\">UI</code>和<code class=\"language-text\">Model</code>绑定起来，使用事件回调监测数据的变化，更新数据，然后刷新<code class=\"language-text\">UI</code>。</p>\n<h1 id=\"脏检测\"><a href=\"#%E8%84%8F%E6%A3%80%E6%B5%8B\" aria-label=\"脏检测 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>脏检测</h1>\n<p><code class=\"language-text\">AngularJS</code>的数据双向绑定是基于脏检查的机制，脏检查的大致实现思想是，在数据层上维护变量的当前值，当视图层上的操作引起数据更新时，会执行脏检测，如果有绑定的变量的值发生了变化，变量对应的指令就会刷新数据绑定的<code class=\"language-text\">UI</code>；同样的脏检查机制的实现，我们在<code class=\"language-text\">DOM</code>上的也有绑定两个东西，一个是数据层上的变量的应用，<code class=\"language-text\">UI</code>更新的时候更新对应的变量，然后另外就是绑定的指令，用来执行具体的<code class=\"language-text\">UI</code>层面的更新逻辑。\n<img src=\"http://Soyn.github.io/img/dirtyCheckHTML.png\" alt=\"dirtyCheckHtml\">\n<img src=\"http://Soyn.github.io/img/dirtyCheckJs.png\" alt=\"dirtyCheckJs\"></p>\n<h1 id=\"数据劫持\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81\" aria-label=\"数据劫持 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据劫持</h1>\n<p>实现双向绑定的另一种方式是，使用数据劫持的方式，给数据层的属性定制<code class=\"language-text\">getter</code>和<code class=\"language-text\">setter</code>，在<code class=\"language-text\">UI</code>上触发了回调函数更新数据的时候，会调到我们定制的<code class=\"language-text\">setter</code>中，在<code class=\"language-text\">setter</code>中会刷新<code class=\"language-text\">UI</code>。\n<img src=\"http://Soyn.github.io/img/hiijackingHTML.png\" alt=\"hijackingHTML\">\n<img src=\"http://Soyn.github.io/img/hijackingJs.png\" alt=\"hijackingJs\">\n在<code class=\"language-text\">DOM</code>属性上我们只需要指明引用的变量，具体的<code class=\"language-text\">UI</code>刷新逻辑定义在<code class=\"language-text\">setter</code>中。</p>\n<p>以上是实现一个双向绑定的常见手段，这里只是了解大致的原理，具体到不同的前端框架中实现的双向绑定，比文章中介绍的更复杂和更健壮，这里只是了解其原理，抓住主要实现原理，框架层面的实现也是基于这些原理来做的。\n文中的<a href=\"https://github.com/Soyn/demos/tree/master/mvvm\">Demo Code</a></p>\n<h1 id=\"refrence\"><a href=\"#refrence\" aria-label=\"refrence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refrence</h1>\n<ul>\n<li><a href=\"https://jixianqianduan.com/frontend-javascript/2015/11/29/js-data-two-ways-binding.html\">javascript实现数据双向绑定的三种方式</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004681757\">JavaScript数据双向绑定的简单演示 - 前端知识点小结 - SegmentFault 思否</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25464162\">数据双向绑定的分析和简单实现 - 知乎</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"双向绑定","date":"June 15, 2019","lang":null}}},{"node":{"id":"c715c185-acce-5ce5-a0ec-e94e4a0be89e","excerpt":"上一篇博客 Javascript模块化 介绍了前端的模块化的一些方案和历史，基于浏览器的 规范 ，我们尝试自己实现一个 。 AMD Loader要解决的问题 主要是为了解决浏览器端的模块化，实现 的话，以下的点要考虑到： 前端的加载是异步的 模块的依赖也是模块（可能会出现循环依赖的问题） 每个Module…","html":"<p>上一篇博客<a href=\"http://cuteshilina.com/2019/02/06/Javascript%E6%A8%A1%E5%9D%97%E5%8C%96/\">Javascript模块化</a>介绍了前端的模块化的一些方案和历史，基于浏览器的<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\"><code class=\"language-text\">AMD</code>规范</a>，我们尝试自己实现一个<code class=\"language-text\">AMD Loader</code>。</p>\n<h1 id=\"amd-loader要解决的问题\"><a href=\"#amd-loader%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"amd loader要解决的问题 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AMD Loader要解决的问题</h1>\n<p><code class=\"language-text\">AMD</code>主要是为了解决浏览器端的模块化，实现<code class=\"language-text\">AMD Loader</code>的话，以下的点要考虑到：</p>\n<ul>\n<li>前端的加载是异步的</li>\n<li>模块的依赖也是模块（可能会出现循环依赖的问题）</li>\n<li>每个Module只加载一次</li>\n<li><code class=\"language-text\">AMD Loader</code>暴露 <code class=\"language-text\">define</code>和<code class=\"language-text\">require</code></li>\n</ul>\n<p>其实我们主要要解决的点在于，如何处理<code class=\"language-text\">Module</code>的加载。<code class=\"language-text\">Module</code>加载要解决两个主要问题，一是对模块的引用（对path的处理）；二是如何维护模块之间的引用关系。</p>\n<h1 id=\"模块代码的加载\"><a href=\"#%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8A%A0%E8%BD%BD\" aria-label=\"模块代码的加载 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模块代码的加载</h1>\n<p>首先来看看<code class=\"language-text\">define</code>的<code class=\"language-text\">API</code>接口：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> dependence<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">define</code>的函数中<code class=\"language-text\">id</code>是表示当前模块的<code class=\"language-text\">id</code>，<strong><code class=\"language-text\">id</code>可以是字符串或者一个绝对路径的字符串</strong>，这里规定不能出现相对<code class=\"language-text\">id</code>，例如’./myModule’或者 ‘../myModule’；<code class=\"language-text\">id</code>是可选的，如果没有提供<code class=\"language-text\">id</code>的话，默认<code class=\"language-text\">id</code>名是<code class=\"language-text\">Module</code>的在浏览器加载当前<code class=\"language-text\">Module</code>的<code class=\"language-text\">url</code>。\n<code class=\"language-text\">dependence</code>，是一个字符串数组，字符串是依赖模块的<code class=\"language-text\">url</code>，可以是相对路径、绝对路径、字符串（如JQuery）。\n所以，我们首先要解决的问题是，如何去规范化用户传进来的各种各样的<code class=\"language-text\">url</code>，例如，下面这些<code class=\"language-text\">url</code>的规范化：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>c<span class=\"token comment\">//d --> a/b/c/d</span>\n <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>c<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>d <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token operator\">/</span>d\n <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>c<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>d <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>c<span class=\"token operator\">/</span>d\n main<span class=\"token operator\">/</span>test<span class=\"token operator\">?</span>foo#bar <span class=\"token operator\">--</span><span class=\"token operator\">></span> main<span class=\"token operator\">/</span>test</code></pre></div>\n<p>对于这些<code class=\"language-text\">URl</code>，我们可以写正则表达式去匹配，在用户传入模块的’url’，需要过一遍我们的正则，将其规范化，对于依赖模块，我们要基于当前<code class=\"language-text\">Config</code>的<code class=\"language-text\">baseURL</code>（如果在config中配置了baseUrl的话），拼成完整的<code class=\"language-text\">url</code>，让浏览器的<code class=\"language-text\">script</code>去加载，在加载完之后，将对应的<code class=\"language-text\">script</code>删除。</p>\n<div class=\"gatsby-highlight\" data-language=\"script\"><pre class=\"language-script\"><code class=\"language-script\">    function loadScript(url, callback) {\n        var node = document.createElement(&#39;script&#39;);\n        var head = document.head;\n        node.setAttribute(&#39;data-module&#39;, url);\n        node.async = true;\n        node.src = url;\n        \n        function onload() {\n            node.onload = node.onerror = null;\n            head.removeChild(node);\n            callback();\n        }\n        node.onerror = function(error) {\n            node.onload = node.onerror = null;\n            head.removeChild(node);\n            callback(error)\n        }\n    }</code></pre></div>\n<p>如上，是使用<code class=\"language-text\">script</code>标签加载模块的一些代码，基本逻辑是：</p>\n<p><code class=\"language-text\">创建script标签 ---&gt; 加载模块源码 ---&gt; 模块加载完成后触发回调函数</code></p>\n<p>这里主要是利用<code class=\"language-text\">script</code>标签来做模块的加载，这里给<code class=\"language-text\">script</code>标签加上了<code class=\"language-text\">async=true</code>的标志，浏览器在解析<code class=\"language-text\">HTML</code>页面的时候，不会因为加载<code class=\"language-text\">script</code>阻塞住页面的解析，在<code class=\"language-text\">script</code>加载成功后执行<code class=\"language-text\">script</code>中的代码。</p>\n<h1 id=\"模块的定义\"><a href=\"#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9A%E4%B9%89\" aria-label=\"模块的定义 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模块的定义</h1>\n<p>在使用<code class=\"language-text\">AMD Loader</code>定义我们的<code class=\"language-text\">Module</code>的时候，使用<code class=\"language-text\">define(id?, dependence?, factory)</code>的接口来定义我们的<code class=\"language-text\">Module</code>，在实现模块定义的时候，我们可以预想到有以下问题：</p>\n<ul>\n<li>模块的加载是异步的，意味着我们需要设计<code class=\"language-text\">notify</code>机制</li>\n<li>我们需要解决模块循环依赖问题</li>\n<li>模块仅仅被加载一次，需要有模块的<code class=\"language-text\">cache</code></li>\n</ul>\n<p><img src=\"http://Soyn.github.io/img/main.png\">\n如上，对于<code class=\"language-text\">main Module</code>有<code class=\"language-text\">dep0, dep1, dep2</code>三个依赖，这里我们在定义<code class=\"language-text\">main Module</code>的时候，将<code class=\"language-text\">main Module</code>中的每个依赖（在声明中只有url）实例化成<code class=\"language-text\">Module</code>，在加载<code class=\"language-text\">main Module</code>的时候，得先要加载我们的依赖<code class=\"language-text\">Module</code>，这里因为<code class=\"language-text\">Module</code>的加载是异步的，所以在实例化我们的依赖的时候，在每个<code class=\"language-text\">Module</code>中保存一个<code class=\"language-text\">refs</code>的数组，这个数组中保存着依赖这个<code class=\"language-text\">Module</code>的<code class=\"language-text\">id</code>，当前<code class=\"language-text\">Module</code>加载完成之后，在<code class=\"language-text\">onload</code>的<code class=\"language-text\">callback</code>中去通知当前模块<code class=\"language-text\">load</code>完成，然后当前<code class=\"language-text\">Module</code>会查看当前<code class=\"language-text\">Module</code>的<code class=\"language-text\">refs</code>中所有的<code class=\"language-text\">Module</code>，在<code class=\"language-text\">refs</code>中这些<code class=\"language-text\">Module</code>就会收集自己所有的依赖是不是都加载完成，如果加载完成了，当前的<code class=\"language-text\">Module</code>就加载完成了，否则就触发当前<code class=\"language-text\">ref</code>的重新<code class=\"language-text\">load</code>（为了触发其他未被加载的依赖的加载）。</p>\n<p>解决了<code class=\"language-text\">notify</code>的问题，剩下的两个问题主要是对<code class=\"language-text\">Module</code>状态的维护，如下图，是整个<code class=\"language-text\">Module</code>的加载的状态转移图：\n<img src=\"http://Soyn.github.io/img/AMDLoader.png\"></p>\n<p>依照上图的状态转移图，<code class=\"language-text\">Module Class</code>的设计如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>depsUrl <span class=\"token operator\">=</span> <span class=\"token function\">getVaildUrl</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>depsModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATUS</span> <span class=\"token operator\">=</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INIT</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nModule<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    constructor<span class=\"token punctuation\">:</span> Module<span class=\"token punctuation\">,</span>\n    fetch<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 加载module的代码</span>\n    save<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>depsUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 检测修正依赖的url，并剔除已经被加载的module的url</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 实例化每个依赖</span>\n    setDependencies<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设置依赖当前模块的refs</span>\n    checkCircular<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 检测循环依赖</span>\n    makeExports<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调用Module的factory函数并输出exports</span>\n    load<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 加载模块</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于Module本身来说我们这里也需要维护一个状态，来表明当前<code class=\"language-text\">Module</code>的执行状态：</p>\n<p><code class=\"language-text\">init --&gt; fetch --&gt; save --&gt; load --&gt; executing --&gt; executed or error</code></p>\n<p><code class=\"language-text\">AMD-Loader</code>的完整代码 —> <a href=\"https://github.com/Soyn/AMDLoader/blob/master/src/index.js\">AMD Loader</a>，<strong>代码实现仅为了解AMD模块加载的原理，并不能用在生产环境下</strong>。</p>\n<h1 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://github.com/creeperyang/blog/issues/17\">AMD加载器分析与实现</a></li>\n<li><a href=\"https://github.com/creeperyang/amd-loader/blob/master/amd.js\">https://github.com/creeperyang/amd-loader/blob/master/amd.js</a></li>\n<li><a href=\"https://github.com/requirejs/requirejs/blob/master/require.js\">requireJS源码</a></li>\n</ul>\n<hr>\n<p><strong><em>兴趣遍地都是，坚持和持之以恒才是稀缺的</em></strong></p>","frontmatter":{"title":"自己动手写AMD Loader","date":"February 23, 2019","lang":null}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}